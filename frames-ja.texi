@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-1999, 2001-2016 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Frames
@chapter フレーム
@cindex frame

  @dfn{フレーム(frame)}とは、1つ以上のEmacsウィンドウを含むスクリーンオブジェクトです(@ref{Windows}を参照)。これは、グラフィカル環境では``ウィンドウ''と呼ばれる類のオブジェクトです。しかし、Emacsはこの単語を異なる方法で使用しているので、ここではそれを``ウィンドウ''と呼ぶことはできません。Emacs
Lispにおいて@dfn{フレームオブジェクト(frame
object)}とは、スクリーン上のフレームを表すLispオブジェクトです。@ref{Frame Type}を参照してください。

  フレームには最初、1つのメインウィンドウおよび/またはミニバッファーウィンドウが含まれます。メインウィンドウは、より小さいウィンドウに垂直、または水平に分割することができます。@ref{Splitting
Windows}を参照してください。

@cindex terminal
  @dfn{端末(terminal)}とは、1つ以上のEmacsフレームを表示する能力のあるデバイスのことです。Emacs
Lispにおいて、@dfn{端末オブジェクト(terminal object)}とは端末を表すLispオブジェクトです。@ref{Terminal
Type}を参照してください。

@cindex text terminal
@cindex graphical terminal
@cindex graphical display
  端末には@dfn{テキスト端末(text terminals)}と@dfn{グラフィカル端末(graphical
terminals)}という、2つのクラスがあります。テキスト端末はグラフィック能力をもたないディスプレイで、@command{xterm}やその他の端末エミュレーターが含まれます。テキスト端末上では、それぞれのEmacsフレームは、その端末のスクリーン全体を占有します。たとえ追加のフレームを作成してそれらを切り替えることができたとしても、端末が表示するのは一度に1つのフレームだけです。一方でグラフィカル端末は、X
Window
Systemのようなグラフィカルディスプレイシステムにより管理されています。これにより、Emacsは同一ディスプレイ上に複数のフレームを同時に表示することができます。

  GNUおよびUnix
systemsシステムでは、単一のEmacsセッション内で、そのEmacsがテキスト端末とグラフィカル端末のいずれで開始されたかに関わらず、任意の利用可能な端末上で、追加のフレームを作成することができます。Emacsは、グラフィカル端末とテキスト端末の両方を、同時に表示することができます。
これはたとえば、リモート地から同じセッションに接続する際などに便利でしょう。@ref{Multiple Terminals}を参照してください。

@defun framep object
この述語(predicate)は、@var{object}がフレームなら非@code{nil}、それ以外は@code{nil}をリターンする。フレームにたいしては、フレームが使用するディスプレイの種類の値となる:

@table @code
@item t
そのフレームはテキスト端末上で表示されている。
@item x
そのフレームはXグラフィカル端末上で表示されている。
@item w32
そのフレームはMS-Windowsグラフィカル端末上で表示されている。
@item ns
そのフレームはGNUStepまたはMacintosh Cocoaグラフィカル端末上で表示されている。
@item pc
そのフレームはMS-DOS端末上で表示されている。
@end table
@end defun

@defun frame-terminal &optional frame
この関数は、@var{frame}を表示する端末オブジェクトをリターンする。@var{frame}が@code{nil}または未指定の場合のデフォルトは、選択されたフレームである。
@end defun

@defun terminal-live-p object
この述語は、@var{object}が生きた(削除されていない)端末なら非@code{nil}、それ以外は@code{nil}をリターンする。生きた端末にたいしては、リターン値はその端末上で表示されているフレームの種類を示す。可能な値は、上述の@code{framep}と同様。
@end defun

@menu
* Creating Frames::          追加のフレームの作成。
* Multiple Terminals::       異なる複数デバイス上での表示。
* Frame Geometry::           Geometric properties of frames.
* Frame Parameters::         フレームのサイズ、位置、フォント等の制御。
* Terminal Parameters::      端末上のすべてのフレームにたいして一般的なパラメーター。
* Frame Titles::             フレームタイトルの自動的な更新。
* Deleting Frames::          明示的に削除されるまでフレームは存続する。
* Finding All Frames::       すべての既存フレームを調べる方法。
* Minibuffers and Frames::   フレームが使用するミニバッファーを見つける方法。
* Input Focus::              選択されたフレームの指定。
* Visibility of Frames::     フレームは可視、不可視、またはアイコン化されているかもしれない。
* Raising and Lowering::     フレームを前面に移動して他のウィンドウを隠し、背面に移動して他のウィンドウがフレームを隠す。
* Frame Configurations::     すべてのフレームの状態の保存。
* Mouse Tracking::           マウス移動時のイベントの取得。
* Mouse Position::           マウスの場所や移動を問い合わせる。
* Pop-Up Menus::             ユーザーに選択させるためのメニューの表示。
* Dialog Boxes::             yes/noを問い合わせるためのボックスの表示。
* Pointer Shape::            マウスポインターのシェイプの指定。
* Window System Selections::  他のXクライアントとのテキストの転送。
* Drag and Drop::            ドラッグアンドドロップの実装の内部。
* Color Names::              カラー名定義の取得。
* Text Terminal Colors::     テキスト端末のカラーの定義。
* Resources::                サーバーからのリソース値の取得。
* Display Feature Testing::  端末の機能の判定。
@end menu

@node Creating Frames
@section フレームの作成
@cindex frame creation

新たにフレームを作成するためには、関数@code{make-frame}を呼び出します。

@deffn Command make-frame &optional alist
この関数は、カレントバッファーを表示するフレームを作成して、それをリターンする。

@var{alist}引数は、新たなフレームのフレームパラメーターを指定するalistである。@ref{Frame
Parameters}を参照のこと。@var{alist}内で@code{terminal}パラメーターを指定した場合、新たなフレームはその端末上で作成される。それ以外の場合、@var{alist}内で@code{window-system}フレームパラメーターを指定した場合、それはフレームがテキスト端末とグラフィカル端末のどちらで表示されるべきかを決定する。@ref{Window
Systems}を参照のこと。どちらも指定されない場合、新たなフレームは選択されたフレームと同じ端末上に作成される。

@var{alist}で指定されなかったパラメーターのデフォルトは、alist
@code{default-frame-alist}内の値となる。そこでも指定されないパラメーターのデフォルトは、Xリソース、またはそのオペレーティングシステムで同等のものの値となる(@ref{X
Resources,, X Resources, emacs, The GNU Emacs Manual}を参照)。フレームが作成された後、Emacsは
@code{frame-inherited-parameters}(以下参照)内にリストされたすべてのパラメーターを適用して、引数にないものは@code{make-frame}呼び出し時に選択されていたフレームから値を取得する。

マルチモニターディスプレイ(@ref{Multiple
Terminals}を参照)では、ウィンドウマネージャーが@var{alist}内の位置パラメーター(@ref{Position
Parameters}を参照)の指定とは異なる位置にフレームを配置するかもしれないことに注意。たとえば、ウィンドウの大きな部分、いわゆる@dfn{支配モニター(dominating
monitor)}上のフレームを表示するポリシーをもつウィンドウマネージャーがいくつかあります。

この関数自体はーが、新たなフレームを選択されたフレームにする訳ではない。@xref{Input
Focus}を参照のこと。以前に選択されていたフレームは、選択されたままである。しかしグラフィカル端末上では、ウィンドウシステム自身の理由により、新たなフレームが選択されるかもしれない。
@end deffn

@defvar before-make-frame-hook
@code{make-frame}がフレームを作成する前に、それにより実行されるノーマルフック。
@end defvar

@defvar after-make-frame-functions
@code{make-frame}がフレームを作成した後に、それにより実行されるアブノーマルフック。@code{after-make-frame-functions}内の各関数は、作成された直後のフレームを単一の引数として受け取る。
@end defvar

@defvar frame-inherited-parameters
この変数は、カレントで選択されているフレームから継承して新たに作成されたフレームのフレームパラメーターのリストを指定する。リスト内の各要素は@code{make-frame}の引数として与えられなかったパラメーター(シンボル)であり、@code{make-frame}は新たに作成されたフレームのそのパラメーターに、選択されたフレームの値をセットする。
@end defvar

@node Multiple Terminals
@section 複数の端末
@cindex multiple terminals
@cindex multi-tty
@cindex multiple X displays
@cindex displays, multiple

  Emacsは、それぞれの端末を@dfn{端末オブジェクト(terminal object)}というデータ型で表します(@ref{Terminal
Type}を参照)。GNUおよびUnixシステムでは、Emacsはそれぞれのセッション内で複数の端末を同時に実行できます。その他のシステムでは、単一の端末だけが使用できます。端末オブジェクトはそれぞれ、以下の属性をもちます:

@itemize @bullet
@item
その端末により使用されるデバイスの名前(たとえば@samp{:0.0}や@file{/dev/tty})。

@item
その端末により使用される端末とキーボードのコーディングシステム。@ref{Terminal I/O Encoding}を参照のこと。

@item
その端末に関連付けられたディスプレイの種類。これは、関数@code{terminal-live-p}によりリターンされるシンボル(たとえば@code{x}、@code{t}、@code{w32}、@code{ns}、@code{pc})である。@ref{Frames}を参照のこと。

@item
端末パラメーターのリスト。@ref{Terminal Parameters}を参照のこと。
@end itemize

  端末オブジェクトを作成するプリミティブはありません。@code{make-frame-on-display}(以下参照)を呼び出したときなど、Emacsは必要に応じてそれらを作成します。

@defun terminal-name &optional terminal
この関数は、@var{terminal}により使用されるデバイスのファイル名をリターンする。@var{terminal}が省略または@code{nil}の場合のデフォルトは、選択されたフレームの端末である。@var{terminal}はフレームでもよく、その場合はそのフレームの端末となる。
@end defun

@defun terminal-list
この関数は、すべての生きた端末オブジェクトのリストをリターンする。
@end defun

@defun get-device-terminal device
この関数は、@var{device}により与えられたデバイス名の端末をリターンする。@var{device}が文字列の場合は端末デバイス名、または@samp{@var{host}:@var{server}.@var{screen}}という形式のXディスプレイ名のいずれかを指定できる。@var{device}の場合、この関数はそのフレームの端末をリターンする。@code{nil}は選択されたフレームを意味する。最後に、もし@var{device}が生きた端末を表す端末オブジェクトなら、その端末がリターンされる。引数がこれらのいずれとも異なる場合、この関数はエラーをシグナルする。
@end defun

@defun delete-terminal &optional terminal force
この関数は、@var{terminal}上のすべてのフレームを削除して、それらが使用していたリソースを解放する。これらはアブノーマルフック@code{delete-terminal-functions}を実行し、各関数の引数として@var{terminal}を渡す。

@var{terminal}が省略または@code{nil}の場合のデフォルトは、選択されたフレームの端末である。@var{terminal}はフレームでもよく、その場合はそのフレームの端末を意味する。

この関数は通常、唯一アクティブな端末の削除を試みるとエラーをシグナルするが、@var{force}が非@code{nil}なら、これを行うことができる。端末上で最後のフレームを削除した際、Emacsは自動的にこの関数を呼び出す(@ref{Deleting
Frames}を参照)。
@end defun

@defvar delete-terminal-functions
@code{delete-terminal}により実行されるアブノーマルフック。各関数は、@code{delete-terminal}に渡された@var{terminal}を、唯一の引数として受け取る。技術的な詳細により、この関数は端末の削除の直前、または直後のいずれかに呼び出される。
@end defvar

@cindex terminal-local variables
  数は多くありませんが、いくつかのLisp変数は@dfn{端末ローカル(terminal-local)}です。つまり、それらは端末それぞれにたいして、個別にバインディングをもちます。いかなるときも、実際に効果をもつバインディングは、カレントで選択されたフレームに属する端末にたいして1つだけです。これらの変数には@code{default-minibuffer-frame}、@code{defining-kbd-macro}、@code{last-kbd-macro}、@code{system-key-alist}が含まれます。これらは常に端末ローカルであり、決してバッファーローカル(@ref{Buffer-Local
Variables}を参照)にはできません。

  On GNU and Unix systems, each X display is a separate graphical terminal.
When Emacs is started from within the X window system, it uses the X display
specified by the @env{DISPLAY} environment variable, or by the
@samp{--display} option (@pxref{Initial Options,,, emacs, The GNU Emacs
Manual}).  Emacs can connect to other X displays via the command
@code{make-frame-on-display}.  Each X display has its own selected frame and
its own minibuffer windows; however, only one of those frames is @emph{the}
selected frame at any given moment (@pxref{Input Focus}).  Emacs can even
connect to other text terminals, by interacting with the
@command{emacsclient} program.  @xref{Emacs Server,,, emacs, The GNU Emacs
Manual}.

@cindex X display names
@cindex display name on X
  1つのXサーバーが、1つ以上のディスプレイを処理できます。各Xディスプレイには、@samp{@var{hostname}:@var{displaynumber}.@var{screennumber}}という3つの部分からなる名前があります。1つ目の部分の@var{hostname}は、その端末が物理的に接続されるマシン名です。2つ目の部分の@var{displaynumber}は、同じキーボードとポインティングデバイス(マウスやタブレット等)を共有するマシンに接続された、1つ以上のモニターを識別するための、0基準の番号です。3つ目の部分の@var{screennumber}は、そのXサーバー上の単一のモニターコレクション(a
single monitor
collection)の一部である、0基準のスクリーン番号(個別のモニター)です。1つのサーバー配下にある2つ以上のスクリーンを使用する際、Emacsはそれらの名前の同一部分から、それらが単一のキーボードを共有することを知ることができるのです。

  MS-WindowsのようにXウィンドウシステムを使用しないシステムは、Xディスプレイの概念をサポートせず、各ホスト上には1つのディスプレイだけがあります。これらのシステム上のディスプレイ名は、上述したような3つの部分からなる名前にしたがいません。たとえば、MS-Windowsシステム上のディスプレイ名は文字列定数@samp{w32}です。これは互換性のために存在するものであり、ディスプレイ名を期待する関数にこれを渡すことができます。

@deffn Command make-frame-on-display display &optional parameters
この関数は、@var{display}上に新たにフレームを作成して、それをリターンする。その他のフレームパラメーターは、alist
@var{parameters}から取得する。@var{display}はXディスプレイの名前(文字列)であること。

Before creating the frame, this function ensures that Emacs is set up to
display graphics.  For instance, if Emacs has not processed X resources
(e.g., if it was started on a text terminal), it does so at this time.  In
all other respects, this function behaves like @code{make-frame}
(@pxref{Creating Frames}).
@end deffn

@defun x-display-list
この関数は、EmacsがどのXディスプレイに接続したかを識別するリストをリターンする。このリストの要素は文字列で、それぞれがディスプレイ名を表す。
@end defun

@defun x-open-connection display &optional xrm-string must-succeed
この関数は、ディスプレイ上にフレームを作成することなく、Xディスプレイ@var{display}への接続をオープンする。通常は、@code{make-frame-on-display}が自動的に呼び出すので、Emacs
Lispプログラムがこの関数を呼び出す必要はない。これを呼び出す唯一の理由は、与えられたXディスプレイにたいして通信を確立できるかどうかチェックするためである。

オプション引数@var{xrm-string}が非@code{nil}なら、それは@file{.Xresources}ファイル内で使用されるフォーマットと同一な、リソース名とリソース値である。@ref{X
Resources,, X Resources, emacs, The GNU Emacs
Manual}を参照のこと。これらの値はそのXサーバー上で記録されたリソース値をオーバーライドして、このディスプレイ上で作成されるすべてのEmacsフレームにたいして適用される。以下は、この文字列がどのようなものかを示す例である:

@example
"*BorderWidth: 3\n*InternalBorder: 2\n"
@end example

@var{must-succeed}が非@code{nil}なら、接続オープンの失敗によりEmacsが終了させられる。それ以外の場合は、通常のLispエラーとなる。
@end defun

@defun x-close-connection display
この関数は、ディスプレイ@var{display}への接続をクローズする。これを行う前にまず、そのディスプレイ上でオープンしたすべてのフレームを削除しなければならない(@ref{Deleting
Frames}を参照)。
@end defun

@cindex multi-monitor
  On some multi-monitor setups, a single X display outputs to more than one
physical monitor.  You can use the functions
@code{display-monitor-attributes-list} and @code{frame-monitor-attributes}
to obtain information about such setups.

@defun display-monitor-attributes-list &optional display
この関数は、@var{display}上の物理モニターの属性のリストをリターンする。@var{display}にはディスプレイ名(文字列)、端末、フレームを指定でき、省略または@code{nil}の場合のデフォルトは、選択されたフレームのディスプレイである。このリストの各要素は、物理モニターの属性を表す連想リストである。1つ目の要素はプライマリーモニターである。以下は属性のキーと値である:

@table @samp
@item geometry
@samp{(@var{x} @var{y} @var{width}
@var{height})}のような、ピクセル単位でのそのモニターのスクリーンの左上隅の位置、そのサイズ。そのモニターがプライマリーモニターでない場合は、いくつかの座標が負になり得る。

@item workarea
Position of the top-left corner and size of the work area (usable space) in
pixels as @samp{(@var{x} @var{y} @var{width} @var{height})}.  This may be
different from @samp{geometry} in that space occupied by various window
manager features (docks, taskbars, etc.)@: may be excluded from the work
area.  Whether or not such features actually subtract from the work area
depends on the platform and environment.  Again, if the monitor is not the
primary monitor, some of the coordinates might be negative.

@item mm-size
@samp{(@var{width} @var{height})}<のような、ミリメートル単位での幅と高さ。

@item frames
その物理モニターが支配(dominate)するフレームのリスト(以下参照)。

@item name
@var{string}のような、その物理モニターの名前。

@item source
@var{string}のような、マルチモニターの情報ソース(例: @samp{XRandr}、@samp{Xinerama}等)。
@end table

@var{x}、@var{y}、@var{width}、@var{height}は整数。@samp{name}と@samp{source}は欠落しているかもしれない。

あるモニター内にフレームの最大領域がある、または(フレームがどの物理モニターに跨がらないなら)そのモニターがフレームに最も近いとき、フレームは物理モニターにより@dfn{支配(dominate)}される。グラフィカルなディスプレイ内の(ツールチップではない)すべてのフレームは、たとえそのフレームが複数の物理モニターに跨がる(または物理モニター上にない)としても、(可視か否かによらず)正確に1つの物理モニターにより支配される。

以下は、2つのモニターディスプレイ上でこの関数により生成されたデータの例である:

@lisp
  (display-monitor-attributes-list)
  @result{}
  (((geometry 0 0 1920 1080) ;; @r{左手側プライマリーモニター}
    (workarea 0 0 1920 1050) ;; @r{タスクバーが幾分かの高さを占有}
    (mm-size 677 381)
    (name . "DISPLAY1")
    (frames #<frame emacs@@host *Messages* 0x11578c0>
            #<frame emacs@@host *scratch* 0x114b838>))
   ((geometry 1920 0 1680 1050) ;; @r{右手側モニター}
    (workarea 1920 0 1680 1050) ;; @r{スクリーン全体を使用可}
    (mm-size 593 370)
    (name . "DISPLAY2")
    (frames)))
@end lisp

@end defun

@defun frame-monitor-attributes &optional frame
この関数は、 @var{frame}を支配(上記参照)する物理モニターの属性をリターンする。
@var{frame}のデフォルトは選択されたフレームである。
@end defun


@node Frame Geometry
@section Frame Geometry
@cindex frame geometry
@cindex frame position
@cindex position of frame
@cindex frame size
@cindex size of frame

The geometry of a frame depends on the toolkit that was used to build this
instance of Emacs and the terminal that displays the frame.  This chapter
describes these dependencies and some of the functions to deal with them.
Note that the @var{frame} argument of all of these functions has to specify
a live frame (@pxref{Deleting Frames}).  If omitted or @code{nil}, it
specifies the selected frame (@pxref{Input Focus}).

@menu
* Frame Layout::             Basic layout of frames.
* Frame Font::               The default font of a frame and how to set it.
* Size and Position::        フレームのサイズと位置の変更。
* Implied Frame Resizing::   Implied resizing of frames and how to prevent 
                               it.
@end menu


@node Frame Layout
@subsection Frame Layout
@cindex frame layout
@cindex layout of frame

The drawing below sketches the layout of a frame on a graphical terminal:
@smallexample
@group

        <------------ Outer Frame Width ----------->
        ___________________________________________
     ^(0)  ___________ External Border __________   |
     | |  |_____________ Title Bar ______________|  |
     | | (1)_____________ Menu Bar ______________|  | ^
     | | (2)_____________ Tool Bar ______________|  | ^
     | | (3) _________ Internal Border ________  |  | ^
     | |  | |   ^                              | |  | |
     | |  | |   |                              | |  | |
Outer  |  | | Inner                            | |  | Native
Frame  |  | | Frame                            | |  | Frame
Height |  | | Height                           | |  | Height
     | |  | |   |                              | |  | |
     | |  | |<--+--- Inner Frame Width ------->| |  | |
     | |  | |   |                              | |  | |
     | |  | |___v______________________________| |  | |
     | |  |___________ Internal Border __________|  | v
     v |______________ External Border _____________|
           <-------- Native Frame Width -------->

@end group
@end smallexample

In practice not all of the areas shown in the drawing will or may be
present.  The meaning of these areas is:

@table @samp
@item Outer Frame
@cindex outer frame
@cindex outer edges
@cindex outer width
@cindex outer height
The @dfn{outer frame} is a rectangle comprising all areas shown in the
drawing.  The edges of that rectangle are called the @dfn{outer edges} of
the frame.  The @dfn{outer width} and @dfn{outer height} of the frame
specify the size of that rectangle.

@cindex outer position
The upper left corner of the outer frame (indicated by @samp{(0)} in the
drawing above) is the @dfn{outer position} or the frame.  It is specified by
and settable via the @code{left} and @code{top} frame parameters
(@pxref{Position Parameters}) as well as the functions @code{frame-position}
and @code{set-frame-position} (@pxref{Size and Position}).

@item External Border
@cindex external border
The @dfn{external border} is part of the decorations supplied by the window
manager.  It's typically used for resizing the frame with the mouse.  The
external border is normally not shown on ``fullboth'' and maximized frames
(@pxref{Size Parameters}) and doesn't exist for text terminal frames.

   The external border should not be confused with the @dfn{outer border}
specified by the @code{border-width} frame parameter (@pxref{Layout
Parameters}).  Since the outer border is usually ignored on most platforms
it is not covered here.

@item Title Bar
@cindex title bar
The @dfn{title bar} is also part of the window manager's decorations and
typically displays the title of the frame (@pxref{Frame Titles}) as well as
buttons for minimizing, maximizing and deleting the frame.  The title bar is
usually not displayed on fullboth (@pxref{Size Parameters})  or tooltip
frames.  Title bars don't exist for text terminal frames.

@item Menu Bar
@cindex internal menu bar
@cindex external menu bar
The menu bar (@pxref{Menu Bar}) can be either internal (drawn by Emacs
itself) or external (drawn by a toolkit).  Most builds (GTK+, Lucid, Motif
and Windows) rely on an external menu bar.  NS also uses an external menu
bar which, however, is not part of the outer frame.  Non-toolkit builds can
provide an internal menu bar.  On text terminal frames, the menu bar is part
of the frame's root window (@pxref{Windows and Frames}).

@item Tool Bar
@cindex internal tool bar
@cindex external tool bar
Like the menu bar, the tool bar (@pxref{Tool Bar}) can be either internal
(drawn by Emacs itself) or external (drawn by a toolkit).  The GTK+ and NS
builds have the tool bar drawn by the toolkit.  The remaining builds use
internal tool bars.  With GTK+ the tool bar can be located on either side of
the frame, immediately outside the internal border, see below.

@item Native Frame
@cindex native frame
@cindex native edges
@cindex native width
@cindex native height
@cindex display area
The @dfn{native frame} is a rectangle located entirely within the outer
frame.  It excludes the areas occupied by the external border, the title bar
and any external menu or external tool bar.  The area enclosed by the native
frame is sometimes also referred to as the @dfn{display area} of the frame.
The edges of the native frame are called the @dfn{native edges} of the
frame.  The @dfn{native width} and @dfn{native height} of the frame specify
the size of the rectangle.

@cindex native position
The top left corner of the native frame specifies the @dfn{native position}
of the frame.  (1)--(3) in the drawing above indicate that position for the
various builds:

@itemize @w{}
@item (1) non-toolkit and terminal frames

@item (2) Lucid, Motif and Windows frames

@item (3) GTK+ and NS frames
@end itemize

Accordingly, the native height of a frame includes the height of the tool
bar but not that of the menu bar (Lucid, Motif, Windows) or those of the
menu bar and the tool bar (non-toolkit and text terminal frames).

The native position of a frame is the reference position of functions that
set or return the current position of the mouse (@pxref{Mouse Position}) and
for functions dealing with the position of windows like @code{window-edges},
@code{window-at} or @code{coordinates-in-window-p} (@pxref{Coordinates and
Windows}).

@item Internal Border
The internal border (@pxref{Layout Parameters}) is a border drawn by Emacs
around the inner frame (see below).

@item Inner Frame
@cindex inner frame
@cindex inner edges
@cindex inner width
@cindex inner height
The @dfn{inner frame} is the rectangle reserved for the frame's windows.
It's enclosed by the internal border which, however, is not part of the
inner frame.  Its edges are called the @dfn{inner edges} of the frame.  The
@dfn{inner width} and @dfn{inner height} specify the size of the rectangle.

@cindex minibuffer-less frame
@cindex minibuffer-only frame
As a rule, the inner frame is subdivided into the frame's root window
(@pxref{Windows and Frames}) and the frame's minibuffer window
(@pxref{Minibuffer Windows}).  There are two notable exceptions to this
rule: A @dfn{minibuffer-less frame} contains a root window only and does not
contain a minibuffer window.  A @dfn{minibuffer-only frame} contains only a
minibuffer window which also serves as that frame's root window.  See
@ref{Initial Parameters} for how to create such frame configurations.

@item Text Area
@cindex text area
The @dfn{text area} of a frame is a somewhat fictitious area located
entirely within the native frame.  It can be obtained by removing from the
native frame any internal borders, one vertical and one horizontal scroll
bar, and one left and one right fringe as specified for this frame, see
@ref{Layout Parameters}.
@end table

@cindex absolute position
The @dfn{absolute position} of a frame or its edges is usually given in
terms of pixels counted from an origin at position (0, 0) of the frame's
display.  Note that with multiple monitors the origin does not necessarily
coincide with the top left corner of the entire usable display area.  Hence
the absolute outer position of a frame or the absolute positions of the
edges of the outer, native or inner frame can be negative in such an
environment even when that frame is completely visible.

  For a frame on a graphical terminal the following function returns the sizes
of the areas described above:

@defun frame-geometry &optional frame
This function returns geometric attributes of @var{frame}.  The return value
is an association list of the attributes listed below.  All coordinate,
height and width values are integers counting pixels.

@table @code
@item outer-position
A cons of the absolute X- and Y-coordinates of the outer position of
@var{frame}, relative to the origin at position (0, 0) of @var{frame}'s
display.

@item outer-size
A cons of the outer width and height of @var{frame}.

@item external-border-size
A cons of the horizontal and vertical width of @var{frame}'s external
borders as supplied by the window manager.  If the window manager doesn't
supply these values, Emacs will try to guess them from the coordinates of
the outer and inner frame.

@item title-bar-size
A cons of the width and height of the title bar of @var{frame} as supplied
by the window manager or operating system.  If both of them are zero, the
frame has no title bar.  If only the width is zero, Emacs was not able to
retrieve the width information.

@item menu-bar-external
If non-@code{nil}, this means the menu bar is external (not part of the
native frame of @var{frame}).

@item menu-bar-size
A cons of the width and height of the menu bar of @var{frame}.

@item tool-bar-external
If non-@code{nil}, this means the tool bar is external (not part of the
native frame of @var{frame}).

@item tool-bar-position
This tells on which side the tool bar on @var{frame} is and can be one of
@code{left}, @code{top}, @code{right} or @code{bottom}.  The only toolkit
that currently supports a value other than @code{top} is GTK+.

@item tool-bar-size
A cons of the width and height of the tool bar of @var{frame}.

@item internal-border-width
The width of the internal border of @var{frame}.
@end table
@end defun

The following function can be used to retrieve the edges of the outer,
native and inner frame.

@defun frame-edges &optional frame type
This function returns the edges of the outer, native or inner frame of
@var{frame}.  @var{frame} must be a live frame and defaults to the selected
one.  The list returned has the form (@var{left} @var{top} @var{right}
@var{bottom}) where all values are in pixels relative to the position (0, 0)
of @var{frame}'s display.  For terminal frames @var{left} and @var{top} are
both zero.

Optional argument @var{type} specifies the type of the edges to return:
@var{type} @code{outer-edges} means to return the outer edges of
@var{frame}, @code{native-edges} (or @code{nil}) means to return its native
edges and @code{inner-edges} means to return its inner edges.

Notice that the pixels at the positions @var{bottom} and @var{right} lie
immediately outside the corresponding frame.  This means that if you have,
for example, two side-by-side frames positioned such that the right outer
edge of the frame on the left equals the left outer edge of the frame on the
right, the pixels representing that edge are part of the frame on the right.
@end defun


@node Frame Font
@subsection Frame Font
@cindex default font
@cindex default character size
@cindex default character width
@cindex default width of character
@cindex default character height
@cindex default height of character
Each frame has a @dfn{default font} which specifies the default character
size for that frame.  This size is meant when retrieving or changing the
size of a frame in terms of columns or lines (@pxref{Size Parameters}).  It
is also used when resizing (@pxref{Window Sizes}) or splitting
(@pxref{Splitting Windows}) windows.

@cindex line height
@cindex column width
@cindex canonical character height
@cindex canonical character width
The terms @dfn{line height} and @dfn{canonical character height} are
sometimes used instead of ``default character height''.  Similarly, the
terms @dfn{column width} and @dfn{canonical character width} are used
instead of ``default character width''.

@defun frame-char-height &optional frame
@defunx frame-char-width &optional frame
These functions return the default height and width of a character in
@var{frame}, measured in pixels.  Together, these values establish the size
of the default font on @var{frame}.  The values depend on the choice of font
for @var{frame}, see @ref{Font and Color Parameters}.
@end defun

The default font can be also set directly with the following function:

@deffn Command set-frame-font font &optional keep-size frames
This sets the default font to @var{font}.  When called interactively, it
prompts for the name of a font, and uses that font on the selected frame.
When called from Lisp, @var{font} should be a font name (a string), a font
object, font entity, or a font spec.

If the optional argument @var{keep-size} is @code{nil}, this keeps the
number of frame lines and columns fixed.  (If non-@code{nil}, the option
@code{frame-inhibit-implied-resize} described in the next section will
override this.)  If @var{keep-size} is non-@code{nil} (or with a prefix
argument), it tries to keep the size of the display area of the current
frame fixed by adjusting the number of lines and columns.

If the optional argument @var{frames} is @code{nil}, this applies the font
to the selected frame only.  If @var{frames} is non-@code{nil}, it should be
a list of frames to act upon, or @code{t} meaning all existing and all
future graphical frames.
@end deffn


@node Size and Position
@subsection Size and Position
@cindex frame size
@cindex frame position
@cindex position of frame

You can read or change the position of a frame using the frame parameters
@code{left} and @code{top} (@pxref{Position Parameters}) and its size using
the @code{height} and @code{width} parameters (@pxref{Size Parameters}).
Here are some special features for working with sizes and positions.  For
all of these functions the argument @var{frame} must denote a live frame and
defaults to the selected frame.

@defun frame-position &optional Lisp_Object &optional frame
This function returns the outer position (@pxref{Frame Layout}) of
@var{frame} in pixels.  The value is a cons giving the coordinates of the
top left corner of the outer frame of @var{frame} relative to an origin at
the position (0, 0) of the frame's display.  On a text terminal frame both
values are zero.
@end defun

@defun set-frame-position frame X Y
This function sets the outer frame position of @var{frame} to @var{X} and
@var{Y}.  The latter arguments specify pixels and normally count from an
origin at the position (0, 0) of @var{frame}'s display.

A negative parameter value positions the right edge of the outer frame by
@var{-x} pixels left from the right edge of the screen or the bottom edge by
@var{-y} pixels up from the bottom edge of the screen.

This function has no effect on text terminal frames.
@end defun

@defun frame-pixel-height &optional frame
@defunx frame-pixel-width &optional frame
   These functions return the inner height and width (the height and width of
the display area, see @ref{Frame Layout}) of @var{frame} in pixels.  For a
text terminal, the results are in characters rather than pixels.
@end defun

@defun frame-text-height &optional frame
@defunx frame-text-width &optional frame
These functions return the height and width of the text area of @var{frame}
(@pxref{Frame Layout}), measured in pixels.  For a text terminal, the
results are in characters rather than pixels.

The value returned by @code{frame-text-height} differs from that returned by
@code{frame-pixel-height} by not including the heights of any internal tool
bar or menu bar, the height of one horizontal scroll bar and the widths of
the internal border.

The value returned by @code{frame-text-width} differs from that returned by
@code{frame-pixel-width} by not including the width of one vertical scroll
bar, the widths of one left and one right fringe and the widths of the
internal border.
@end defun

@defun frame-height &optional frame
@defunx frame-width &optional frame
These functions return the height and width of the text area of @var{frame},
measured in units of the default font height and width of @var{frame}
(@pxref{Frame Font}).  These functions are plain shorthands for writing
@code{(frame-parameter frame 'height)} and @code{(frame-parameter frame
'width)}.

If the text area of @var{frame} measured in pixels is not a multiple of its
default font size, the values returned by these functions are rounded down
to the number of characters of the default font that fully fit into the text
area.
@end defun

@defopt frame-resize-pixelwise
If this option is @code{nil}, a frame's size is usually rounded to a
multiple of the current values of that frame's @code{frame-char-height} and
@code{frame-char-width} whenever the frame is resized.  If this is
non-@code{nil}, no rounding occurs, hence frame sizes can increase/decrease
by one pixel.

Setting this variable usually causes the next resize operation to pass the
corresponding size hints to the window manager.  This means that this
variable should be set only in a user's initial file; applications should
never bind it temporarily.

The precise meaning of a value of @code{nil} for this option depends on the
toolkit used.  Dragging the external border with the mouse is done
character-wise provided the window manager is willing to process the
corresponding size hints.  Calling @code{set-frame-size} (see below)  with
arguments that do not specify the frame size as an integer multiple of its
character size, however, may: be ignored, cause a rounding (GTK+), or be
accepted (Lucid, Motif, MS-Windows).

With some window managers you may have to set this to non-@code{nil} in
order to make a frame appear truly maximized or full-screen.
@end defopt

@defun set-frame-size frame width height &optional pixelwise
This function sets the size of the text area of @var{frame}, measured in
terms of the canonical height and width of a character on @var{frame}
(@pxref{Frame Font}).

オプション引数@var{pixelwise}が非@code{nil}の場合は、かわりにピクセル単位で新たな幅と高さを測ることを意味する。@code{frame-resize-pixelwise}が@code{nil}の場合、それが文字の整数倍でフレームサイズを増加あるいは減少させないなら、この要求を完全には尊重せずに拒絶するツールキットがいくつかあることに注意されたい。
@end defun

@defun set-frame-height frame height &optional pretend pixelwise
This function resizes the text area of @var{frame} to a height of
@var{height} lines.  The sizes of existing windows in @var{frame} are
altered proportionally to fit.

If @var{pretend} is non-@code{nil}, then Emacs displays @var{height} lines
of output in @var{frame}, but does not change its value for the actual
height of the frame.  This is only useful on text terminals.  Using a
smaller height than the terminal actually implements may be useful to
reproduce behavior observed on a smaller screen, or if the terminal
malfunctions when using its whole screen.  Setting the frame height directly
does not always work, because knowing the correct actual size may be
necessary for correct cursor positioning on text terminals.

オプションの第4引数@var{pixelwise}が非@code{nil}なら、それは@var{frame}の高さが@var{height}ピクセル高くなることを意味する。@code{frame-resize-pixelwise}が@code{nil}の場合、それが文字の整数倍でフレームサイズを増加あるいは減少させないなら、この要求を完全には尊重せずに拒絶するツールキットがいくつかあることに注意されたい。
@end defun

@defun set-frame-width frame width &optional pretend pixelwise
This function sets the width of the text area of @var{frame}, measured in
characters.  The argument @var{pretend} has the same meaning as in
@code{set-frame-height}.

オプションの第4引数@var{pixelwise}が非@code{nil}なら、それは@var{frame}の幅が@var{height}ピクセル広くなることを意味する。@code{frame-resize-pixelwise}が@code{nil}の場合、それが文字の整数倍でフレームサイズを増加あるいは減少させないなら、この要求を完全には尊重せずに拒絶するツールキットがいくつかあることに注意されたい。
@end defun

None of these three functions will make a frame smaller than needed to
display all of its windows together with their scroll bars, fringes,
margins, dividers, mode and header lines.  This contrasts with requests by
the window manager triggered, for example, by dragging the external border
of a frame with the mouse.  Such requests are always honored by clipping, if
necessary, portions that cannot be displayed at the right, bottom corner of
the frame.


@node Implied Frame Resizing
@subsection Implied Frame Resizing
@cindex implied frame resizing
@cindex implied resizing of frame

By default, Emacs tries to keep the number of lines and columns of a frame's
text area unaltered when, for example, adding or removing the menu bar,
changing the default font or setting the width of the frame's scroll bars.
This means, however, that in such case Emacs must ask the window manager to
resize the outer frame in order to accommodate the size change.  Note that
wrapping a menu or tool bar usually does not resize the frame's outer size,
hence this will alter the number of displayed lines.

   Occasionally, such @dfn{implied frame resizing} may be unwanted, for
example, when the frame is maximized or made full-screen (where it's turned
off by default).  In other cases you can disable implied resizing with the
following option:

@defopt frame-inhibit-implied-resize
If this option is @code{nil}, changing font, menu bar, tool bar, internal
borders, fringes or scroll bars of a specific frame may implicitly resize
the frame's display area in order to preserve the number of columns or lines
the frame displays.  If this option is non-@code{nil}, no implied resizing
is done.

The value of this option can be also be a list of frame parameters.  In that
case, implied resizing is inhibited when changing a parameter that appears
in this list.  The frame parameters currently handled by this option are:
@code{font}, @code{font-backend}, @code{internal-border-width},
@code{menu-bar-lines} and @code{tool-bar-lines}.

Changing any of the @code{scroll-bar-width}, @code{scroll-bar-height},
@code{vertical-scroll-bars}, @code{horizontal-scroll-bars},
@code{left-fringe} and @code{right-fringe} frame parameters is handled as if
the frame contained just one live window.  This means, for example, that
removing vertical scroll bars on a frame containing several side by side
windows will shrink the outer frame width by the width of one scroll bar
provided this option is @code{nil} and keep it unchanged if this option is
either @code{t} or a list containing @code{vertical-scroll-bars}.

The default value is @code{'(tool-bar-lines)} for Lucid, Motif and Windows
(which means that adding/removing a tool bar there does not change the outer
frame height), @code{nil} on all other window systems including GTK+ (which
means that changing any of the parameters listed above may change the size
of the outer frame), and @code{t} otherwise (which means the outer frame
size never changes implicitly when there's no window system support).

Note that when a frame is not large enough to accommodate a change of any of
the parameters listed above, Emacs may try to enlarge the frame even if this
option is non-@code{nil}.
@end defopt


@node Frame Parameters
@section フレームのパラメーター
@cindex frame parameters

  フレームはに、その外見と挙動を制御する、多くのパラメーターがあります。フレームがどのようなパラメーターをもつかは、そのフレームが使用するディスプレイのメカニズムに依存します。

  フレームパラメーターは主に、グラフィカルディスプレイのために存在します。ほとんどのフレームパラメーターは、テキスト端末上のフレームに適用時は効果がありません。テキスト端末上のフレームでは、何か特別なことを行うパラメーターは@code{height}、@code{width}、@code{name}、@code{title}、@code{menu-bar-lines}、@code{buffer-list}、@code{buffer-predicate}だけです。その端末がカラーをサポートには@code{foreground-color}、@code{background-color}、@code{background-mode}、@code{display-type}などのパラメーターも意味をもちます。その端末が透過フレーム(frame
transparency)をサポートする場合には、パラメーター@code{alpha}も意味をもちます。

@menu
* Parameter Access::         フレームのパラメーターの変更方法。
* Initial Parameters::       フレーム作成時に指定するフレームパラメーター。
* Window Frame Parameters::  ウィンドウシステムにたいするフレームパラメーターのリスト。
* Geometry::                 ジオメトリー仕様の解析。
@end menu

@node Parameter Access
@subsection フレームパラメーターへのアクセス

以下の関数により、フレームのパラメーター値の読み取りと変更ができます。

@defun frame-parameter frame parameter
この関数は、@var{frame}のパラメーター@var{parameter}(シンボル)の値をリターンする。@var{frame}が@code{nil}なら、選択されたフレームのパラメーターをリターンする。@var{frame}が@var{parameter}にたいするセッティングをもたない場合、この関数は@code{nil}をリターンする。
@end defun

@defun frame-parameters &optional frame
関数@code{frame-parameters}は、@var{frame}のすべてのパラメーターとその値をリストするalistをリターンする。@var{frame}が省略または@code{nil}の場合は、選択されたフレームのパラメーターをリターンする。
@end defun

@defun modify-frame-parameters frame alist
This function alters the frame @var{frame} based on the elements of
@var{alist}.  Each element of @var{alist} has the form @code{(@var{parm}
. @var{value})}, where @var{parm} is a symbol naming a parameter.  If you
don't mention a parameter in @var{alist}, its value doesn't change.  If
@var{frame} is @code{nil}, it defaults to the selected frame.

Some parameters are only meaningful for frames on certain kinds of display
(@pxref{Frames}).  If @var{alist} includes parameters that are not
meaningful for the @var{frame}'s display, this function will change its
value in the frame's parameter list, but will otherwise ignore it.

When @var{alist} specifies more than one parameter whose value can affect
the new size of @var{frame}, the final size of the frame may differ
according to the toolkit used.  For example, specifying that a frame should
from now on have a menu and/or tool bar instead of none and simultaneously
specifying the new height of the frame will inevitably lead to a
recalculation of the frame's height.  Conceptually, in such case, this
function will try to have the explicit height specification prevail.  It
cannot be excluded, however, that the addition (or removal)  of the menu or
tool bar, when eventually performed by the toolkit, will defeat this
intention.

Sometimes, binding @code{frame-inhibit-implied-resize} (@pxref{Implied Frame
Resizing}) to a non-@code{nil} value around calls to this function may fix
the problem sketched here.  Sometimes, however, exactly such binding may be
hit by the problem.
@end defun

@defun set-frame-parameter frame parm value
この関数は、フレームパラメーター@var{parm}に、指定された@var{value}をセットする。@var{frame}が@code{nil}の場合のデフォルトは、選択されたフレームである。
@end defun

@defun modify-all-frames-parameters alist
この関数は、
@var{alist}に応じて既存のフレームすべてのフレームパラメーターを変更してから、今後に作成されるフレームに同じパラメーター値を適用するために、@code{default-frame-alist}(と必要なら@code{initial-frame-alist})を変更する。
@end defun

@node Initial Parameters
@subsection フレームの初期パラメーター
@cindex parameters of initial frame

initファイル(@ref{Init
File}を参照)内で@code{initial-frame-alist}をセットすることにより、フレームの初期スタートアップにパラメーターを指定できます。

@defopt initial-frame-alist
この変数の値は、初期フレーム作成時に使用されるパラメーター値のalistである。以降のフレームを変更することなく、初期フレームの外見を指定するために、この変数を使用できる。要素はそれぞれ以下の形式をもつ:

@example
(@var{parameter} . @var{value})
@end example

Emacsは、initファイル読み取り前に初期フレームを作成する。After reading that file, Emacs checks
@code{initial-frame-alist}をチェックして、すでに作成済みの初期フレームに、変更する値に含まれるパラメーターのセッティングを適用する。

これらのセッティングがフレームのジオメトリーと外見に影響する場合には、間違った外見のフレームを見た後、指定した外見に変更されるのを目にするだろう。これが煩わしい場合は、Xリソースで同じジオメトリーと外見を指定できる。これらは、フレーム作成前に効果をもつ。@ref{X
Resources,, X Resources, emacs, The GNU Emacs Manual}を参照されたい。

Xリソースセッティングは通常、すべての!に適用される。初期フレームのために、あるXリソースを単独で指定して、それ以降のフレームには適用したくない場合は、次の方法によりこれを達成できる。それ以降のフレームにたいするXリソースをオーバーライドするために、@code{default-frame-alist}内でパラメーターを指定してから、それらが初期フレームに影響するのを防ぐために、@code{initial-frame-alist}内の同じパラメーターにたいして、Xリソースにマッチする値を指定すればよい。
@end defopt

@cindex minibuffer-only frame
これらのパラメーターに@code{(minibuffer
.
nil)}が含まれるなら、それは初期フレームがミニバッファーをもつべきではないことを示します。この場合、Emacsは同じように@dfn{ミニバッファーオンリーフレーム(minibuffer-only
frame)}を別個作成します。

@defopt minibuffer-frame-alist
この変数の値は、初期ミニバッファーオンリーフレーム(@code{initial-frame-alist}がミニバッファーのないフレームを指定する場合にEmacsが作成するミニバッファーオンリーフレームのこと)を作成時に使用されるパラメーター値のalistである。
@end defopt

@defopt default-frame-alist
これは、すべてのEmacsフレーム(最初のフレームとそれ以降のフレーム)にたいして、フレームパラメーターのデフォルト値を指定するalistである。Xウィンドウシステム使用時には、大抵はXリソースで同じ結果を得られる。

この変数のセットは既存フレームに影響しない。さらに、別フレームにバッファーを表示する関数は、自身のパラメーターを提供することにより、デフォルトパラメーターをオーバーライドできる。
@end defopt

フレームの外見を指定するコマンドラインオプションとともにEmacsを呼び出した場合、これらのオプションは@code{initial-frame-alist}または@code{default-frame-alist}のいずれかに要素を追加することにより、効果を発揮します。@samp{--geometry}や@samp{--maximized}のような、初期フレームだけに影響するオプションは@code{initial-frame-alist}、その他のオプションは@code{default-frame-alist}に要素を追加します。@ref{Emacs
Invocation,, Command Line Arguments for Emacs Invocation, emacs, The GNU
Emacs Manual}を参照してください。

@node Window Frame Parameters
@subsection ウィンドウフレームパラメーター
@cindex frame parameters for windowed displays

  フレームがどんなパラメーターをもつかは、どのようなディスプレイのメカニズムがそれを使用するかに依存します。このセクションでは、一部、またはすべての端末種類において特別な意味をもつパラメーターを説明します。これらのうち@code{name}、@code{title}、@code{height}、@code{width}、@code{buffer-list}、@code{buffer-predicate}は端末フレームにおいて有意な情報を提供し、@code{tty-color-mode}はテキスト端末上のフレームにたいして意味があります。

@menu
* Basic Parameters::         基本的なパラメーター。
* Position Parameters::      スクリーン上のフレームの位置。
* Size Parameters::          フレームのサイズ。
* Layout Parameters::        フレームのパーツのサイズと、一部パーツの有効化と無効化。
* Buffer Parameters::        表示済みまたは表示されるべきバッファーはどれか。
* Management Parameters::    ウィンドウマネージャーとの対話。
* Cursor Parameters::        カーソルの外見の制御。
* Font and Color Parameters::  フレームテキストにたいするフォントとカラー。
@end menu

@node Basic Parameters
@subsubsection 基本パラメーター

  以下のフレームパラメーターは、フレームに関してもっとも基本的な情報を提供します。@code{title}と@code{name}は、すべての端末において意味をもちます。

@table @code
@vindex display, a frame parameter
@item display
このフレームをオープンするためのディスプレイ。これは環境変数@env{DISPLAY}のような、@samp{@var{host}:@var{dpy}.@var{screen}}という形式の文字列であること。ディスプレイ名についての詳細は、@xref{Multiple
Terminals}を参照のこと。

@vindex display-type, a frame parameter
@item display-type
このパラメーターは、このフレーム内で使用できる利用可能なカラーの範囲を記述する。値は@code{color}、@code{grayscale}、@code{mono}のいずれか。

@vindex title, a frame parameter
@item title
フレームが非@code{nil}のtitleをもつ場合、それはフレーム上端にあるウィンドウシステムのタイトルバーに表示され、@code{mode-line-frame-identification}に@samp{%F}(@ref{%-Constructs}を参照)を使用していればそのフレーム内のウィンドウのモードラインにも表示される。これは通常、Emacsがウィンドウシステムを使用しておらず、かつ同時に1つのフレームのみ表示可能なケースが該当する。@ref{Frame
Titles}を参照のこと。

@vindex name, a frame parameter
@item name
そのフレームの名前。@code{title}が未指定または@code{nil}なら、フレーム名はフレームタイトルにたいしてデフォルトの役割りを果たす。nameを指定しない場合、Emacsは自動的にフレーム名をセットする(@ref{Frame
Titles}を参照)。

フレーム作成時に明示的にフレーム名を指定した場合は、そのフレームにたいしてXリソースを照合する際にも、(Emacs実行可能形式名のかわりに)その名前が使用される。

@item explicit-name
フレーム作成時にフレーム名が明示的に指定された場合、このパラメーターはその名前になるだろう。明示的に名付けられなかった場合、このパラメーターは@code{nil}になる。
@end table

@node Position Parameters
@subsubsection 位置のパラメーター
@cindex window position on display
@cindex frame position

  Position parameters' values are measured in pixels.  (Note that none of
these parameters exist on TTY frames.)

@table @code
@vindex left, a frame parameter
@item left
スクリーンの左(右)端からフレームの左(右)端までの、ピクセル単位での位置。値は:

@table @asis
@item 整数
正の整数は、スクリーン左端をフレーム左端に、負の整数はフレーム右端をスクリーン右端に関連付ける。

@item @code{(+ @var{pos})}
これは、スクリーン左端にたいしフレーム左端の相対的位置を指定する。整数@var{pos}は正および負の値をとり得る。負の値はスクリーン外側、または(マルチモニターディスプレイにたいしては)プライマリーモニター以外のモニター上の位置を指定する。

@item @code{(- @var{pos})}
これは、スクリーン右端にたいしフレーム右端の相対的位置を指定する。整数@var{pos}は正および負の値をとり得る。負の値はスクリーン外側、または(マルチモニターディスプレイにたいしては)プライマリーモニター以外のモニター上の位置を指定する。
@end table

プログラム指定の位置を無視するウィンドウマネージャーがいくつかある。指定した位置が無視されない保証を望む場合は、パラメーター@code{user-position}にも同様に非@code{nil}値を指定すること。

If the window manager refuses to align a frame at the left or top screen
edge, combining position notation and @code{user-position} as in

@example
(modify-frame-parameters
  nil '((user-position . t) (left . (+ -4))))
@end example

may help to override that.

@vindex top, a frame parameter
@item top
スクリーン上(下)端にたいして、上(下)端のスクリーン位置をピクセル単位で指定する。方向が水平ではなく垂直である点を除き、これは@code{left}と同様に機能する。

@vindex icon-left, a frame parameter
@item icon-left
スクリーン左端から数えた、フレームアイコン左端のピクセル単位のスクリーン位置。ウィンドウマネージャーがこの機能をサポートすれば、これはフレームをアイコン化したとき効果を発揮する。このパラメーターに値を指定する場合は@code{icon-top}にも値を指定しなければならず、その逆も真である。

@vindex icon-top, a frame parameter
@item icon-top
スクリーン上端から数えた、フレームアイコン上端のピクセル単位のスクリーン位置。ウィンドウマネージャーがこの機能をサポートすれば、これはフレームをアイコン化したとき効果を発揮する。

@vindex user-position, a frame parameter
@item user-position
フレームを作成してパラメーター@code{left}と@code{top}で位置を指定する際は、指定した位置がユーザー指定(人間であるユーザーにより明示的に要求された位置)なのか、それとも単なるプログラム指定(プログラムにより選択された位置)なのかを告げるために、このパラメーターを使用する。非@code{nil}値は、それがユーザー指定の位置であることを告げる。

@cindex window positions and window managers
ウィンドウマネージャーは一般的にユーザー指定位置に留意し、プログラム指定位置にも幾分か留意する。しかし、多くはプログラム指定位置を無視してウィンドウをウィンドウマネージャーのデフォルトの方法で配すか、ユーザーのマウスによる配置に任せる。@code{twm}を含むウィンドウマネージャーのいくつかは、プログラム指定位置にしたがうか無視するかをユーザーの指定に任せる。

@code{make-frame}を呼び出す際、パラメーター@code{left}および@code{top}の値がそのユーザーにより示される嗜好を表すなら、このパラメーターに非@code{nil}値を、それ以外は@code{nil}を指定するべきである。
@end table


@node Size Parameters
@subsubsection サイズのパラメーター
@cindex window size on display

  フレームパラメーターはフレームのサイズを文字単位で指定します。グラフィカルなディスプレイ上では、@code{default}フェイスがこれら文字単位の実際のピクセルサイズを決定します(@ref{Face
Attributes}を参照)。

@table @code
@vindex height, a frame parameter
@item height
The height of the frame's text area (@pxref{Frame Geometry}), in characters.

@vindex width, a frame parameter
@item width
The width of the frame's text area (@pxref{Frame Geometry}), in characters.

@vindex user-size, a frame parameter
@item user-size
これは、サイズパラメーター@code{height}および@code{width}にたいして、@code{user-position}(@ref{Position
Parameters, user-position}を参照)が@code{top}および@code{left}が行うのと同じことを行う。

@cindex fullboth frames
@cindex fullheight frames
@cindex fullwidth frames
@cindex maximized frames
@vindex fullscreen, a frame parameter
@item fullscreen
This parameter specifies whether to maximize the frame's width, height or
both.  Its value can be @code{fullwidth}, @code{fullheight},
@code{fullboth}, or @code{maximized}.  A @dfn{fullwidth} frame is as wide as
possible, a @dfn{fullheight} frame is as tall as possible, and a
@dfn{fullboth} frame is both as wide and as tall as possible.  A
@dfn{maximized} frame is like a ``fullboth'' frame, except that it usually
keeps its title bar and the buttons for resizing and closing the frame.
Also, maximized frames typically avoid hiding any task bar or panels
displayed on the desktop.  A ``fullboth'' frame, on the other hand, usually
omits the title bar and occupies the entire available screen space.

Full-height and full-width frames are more similar to maximized frames in
this regard.  However, these typically display an external border which
might be absent with maximized frames.  Hence the heights of maximized and
full-height frames and the widths of maximized and full-width frames often
differ by a few pixels.

With some window managers you may have to customize the variable
@code{frame-resize-pixelwise} (@pxref{Size and Position}) in order to make a
frame truly appear maximized or full-screen.  Moreover, some window managers
might not support smooth transition between the various full-screen or
maximization states.  Customizing the variable
@code{x-frame-normalize-before-maximize} can help to overcome that.

@vindex fullscreen-restore, a frame parameter
@item fullscreen-restore
This parameter specifies the desired fullscreen state of the frame after
invoking the @code{toggle-frame-fullscreen} command (@pxref{Frame
Commands,,, emacs, The GNU Emacs Manual}) in the ``fullboth'' state.
Normally this parameter is installed automatically by that command when
toggling the state to fullboth.  If, however, you start Emacs in the
``fullboth'' state, you have to specify the desired behavior in your initial
file as, for example

@example
(setq default-frame-alist
    '((fullscreen . fullboth) (fullscreen-restore . fullheight)))
@end example

This will give a new frame full height after typing in it @key{F11} for the
first time.
@end table


@node Layout Parameters
@subsubsection レイアウトのパラメーター
@cindex layout parameters of frames
@cindex frame layout parameters

  以下のフレームパラメーターにより、フレームのさまざまなパーツを有効または無効にしたり、サイズを制御できます。

@table @code
@vindex border-width, a frame parameter
@item border-width
ピクセル単位でのフレームのボーダー幅。

@vindex internal-border-width, a frame parameter
@item internal-border-width
テキスト(またはフリンジ)とフレームボーダーとのピクセル単位による距離。

@vindex vertical-scroll-bars, a frame parameter
@item vertical-scroll-bars
フレームが垂直スクロール用のスクロールバーをもつべきか否か、スクロールバーをフレームのどちら側に置くか。可能な値は@code{left}、@code{right}、スクロールバーなしは@code{nil}。

@vindex horizontal-scroll-bars, a frame parameter
@item horizontal-scroll-bars
Whether the frame has scroll bars for horizontal scrolling (@code{t} and
@code{bottom} mean yes, @code{nil} means no).

@vindex scroll-bar-width, a frame parameter
@item scroll-bar-width
垂直スクロールバーのピクセル単位による幅。@code{nil}はデフォルト幅の使用を意味する。

@vindex scroll-bar-height, a frame parameter
@item scroll-bar-height
The height of horizontal scroll bars, in pixels, or @code{nil} meaning to
use the default height.

@vindex left-fringe, a frame parameter
@vindex right-fringe, a frame parameter
@item left-fringe
@itemx right-fringe
そのフレーム内のウィンドウの左右フリンジのデフォルト幅(@ref{Fringes}を参照)。いずれかが0なら、対応するフリンジを削除する効果がある。
If either of these is zero, that effectively removes the corresponding
fringe.

これら2つのフレームパラメーターの値を問い合わせるために@code{frame-parameter}を使用する際、リターン値は常に整数となる。@code{nil}値を渡して@code{set-frame-parameter}を使用する際は、実際のデフォルト値8ピクセルが課せられる。

@vindex right-divider-width, a frame parameter
@item right-divider-width
フレーム上のすべてのウィンドウの右ディバイダー(@ref{Window
Dividers}を参照)用に予約される、ピクセル単位の幅(厚さ)。値0は右ディバイダーを描画しないことを意味する。

@vindex bottom-divider-width, a frame parameter
@item bottom-divider-width
フレーム上のすべてのウィンドウの下ディバイダー(@ref{Window
Dividers}を参照)用に予約される、ピクセル単位の幅(厚さ)。値0は下ディバイダーを描画しないことを意味する。

@vindex menu-bar-lines frame parameter
@item menu-bar-lines
メニューバー用にフレーム上端に割り当てる行数。Menu Barモードが有効の場合のデフォルトは1、それ以外は0である。@ref{Menu
Bars,,,emacs, The GNU Emacs Manual}を参照のこと。

@vindex tool-bar-lines frame parameter
@item tool-bar-lines
ツールバー用に使用する行数。Tool Barモードが有効の場合のデフォルトは1、それ以外は0である。@xref{Tool Bars,,,emacs,
The GNU Emacs Manual}を参照のこと。

@vindex tool-bar-position frame parameter
@item tool-bar-position
ツールバーの位置。現在のところGTKツールバーのみ。可能な値は@code{top}、@code{bottom}、@code{left}、@code{right}。デフォルトは@code{top}。

@vindex line-spacing, a frame parameter
@item line-spacing
各テキスト行配下に残す、ピクセル単位の追加スペース(正の整数)。詳細は@ref{Line Height}を参照のこと。
@end table

@node Buffer Parameters
@subsubsection バッファーのパラメーター
@cindex frame, which buffers to display
@cindex buffers to display on frame

  以下は、フレーム内でどのバッファーが表示されているか、されるべきかを扱うためのフレームパラメーターで、すべての種類の端末上で意味があります。

@table @code
@vindex minibuffer, a frame parameter
@item minibuffer
そのフレームが自身のミニバッファーをもつか否か。もつ場合は@code{t}、もたない場合は@code{nil}、@code{only}ならそのフレームが正にミニバッファーであることを意味する。値が(別フレーム内の)ミニバッファーウィンドウの場合、そのフレームはそのミニバッファーを使用する。

このフレームパラメーターはフレーム作成時に効果があち、その後は変更できない。

@vindex buffer-predicate, a frame parameter
@item buffer-predicate
このフレームにたいする、buffer-predicate関数。関数@code{other-buffer}は、どのバッファーを考慮すべきか決定するために、(選択されたフレームから)この述語が@code{nil}でなければ、これを使用する。これは各バッファーにたいして、そのバッファーを唯一の引数として、この述語を1回呼び出す。この述語が非@code{nil}値をリターンしたら、そのバッファーは考慮される。

@vindex buffer-list, a frame parameter
@item buffer-list
そのフレーム内で選択されているバッファーの、もっとも最近選択されたバッファーが先頭になるような順のリスト。

@vindex unsplittable, a frame parameter
@item unsplittable
非@code{nil}なら、このフレームのウィンドウは決して自動的に分割されることはない。
@end table

@node Management Parameters
@subsubsection ウィンドウ管理のパラメーター
@cindex window manager interaction, and frame parameters

  以下のフレームパラメーターは、ウィンドウマネージャーとフレームとの相互作用のさまざまな面を制御します。これらは、テキスト端末上では効果がありません。

@table @code
@vindex visibility, a frame parameter
@item visibility
フレームの可視性(visibility)の状態。可能な値は3つあり、@code{nil}は不可視、@code{t}は可視、@code{icon}はアイコン化されていることを意味する。@ref{Visibility
of Frames}を参照のこと。

@vindex auto-raise, a frame parameter
@item auto-raise
非@code{nil}なら、Emacsはそのフレーム選択時に自動的にそれを前面に移動(raise)する。これを許さないウィンドウマネージャーがいくつかある。

@vindex auto-lower, a frame parameter
@item auto-lower
非@code{nil}なら、Emacsはそのフレームの選択解除時に自動的にそれを背面に移動(lower)する。これを許さないウィンドウマネージャーがいくつかある。

@vindex icon-type, a frame parameter
@item icon-type
そのフレームに使用するアイコンのタイプ。値が文字列の場合、それは使用するビットマップを含むファイルを指定し、@code{nil}はアイコンなしを指定する(何を表示するかはウィンドウマネージャーが決定する)。その他の非@code{nil}値は、デフォルトのEmacsアイコンを指定する。

@vindex icon-name, a frame parameter
@item icon-name
このフレームにたいするアイコンで使用する名前。アイコンを表示する場合は、その際に表示される。これが@code{nil}なら、フレームのタイトルが使用される。

@vindex window-id, a frame parameter
@item window-id
グラフィカルディスプレイがこのフレームにたいして使用するID番号。Emacsは、フレーム作成時にこのパラメーターを割り当てる。このパラメーターを変更しても、実際のID番号に効果はない。

@vindex outer-window-id, a frame parameter
@item outer-window-id
そのフレームが存在する最外殻のウィンドウシステムのウィンドウのID番号。@code{window-id}と同様、このパラメーターを変更しても実際の効果はない。

@vindex wait-for-wm, a frame parameter
@item wait-for-wm
非@code{nil}なら、ジオメトリー変更を確認するために、ウィンドウマネージャーを待機するようXtに指示する。Fvwm2およびKDEのバージョンを含むウィンドウマネージャーのいくつかは確認に失敗するので、Xtがハングする。これらウィンドウマネージャーのハングを防ぐために、これを@code{nil}にセットする。

@vindex sticky, a frame parameter
@item sticky
非@code{nil}なら、仮想デスクトップを伴うシステム上のすべての仮想デスクトップ上で、そのフレームが可視になる。

@ignore
@vindex parent-id, a frame parameter
@item parent-id
@c ??? Not yet working.
The X window number of the window that should be the parent of this one.
Specifying this lets you create an Emacs window inside some other
application's window.  (It is not certain this will be implemented; try
it and see if it works.)
@end ignore
@end table

@node Cursor Parameters
@subsubsection カーソルのパラメーター
@cindex cursor, and frame parameters

  このフレームパラメーター!、カーソルの外見を制御します。

@table @code
@vindex cursor-type, a frame parameter
@item cursor-type
カーソルの表示方法。適正な値は:

@table @code
@item box
塗りつぶされた四角形(filled box)を表示する(デフォルト)。
@item hollow
中抜きの四角形(hollow box)を表示する。
@item nil
カーソルウィンドウ表示しない。
@item bar
文字間に垂直バー(vertical bar)を表示する。
@item (bar . @var{width})
文字間に幅が@var{width}ピクセルの垂直バー(vertical bar)を表示する。
@item hbar
文字間に水平バー(horizontal bar)を表示する。
@item (hbar . @var{height})
文字間に高さが@var{height}ピクセルの水平バー(horizontal bar)を表示する。
@end table
@end table

@vindex cursor-type
フレームパラメーター@code{cursor-type}は、変数@code{cursor-type}および@code{cursor-in-non-selected-windows}によりオーバーライドされるかもしれません。

@defvar cursor-type
このバッファーローカル変数は、選択されたウィンドウ内で表示されているそのバッファーのカーソルの外見を制御する。この値が@code{t}なら、それはフレームパラメーター@code{cursor-type}で指定されたカーソルのーを使用することを意味する。それ以外では、値は上記リストのカーソルタイプのいずれかであるべきで、これはフレームパラメーター@code{cursor-type}をオーバーライドする。
@end defvar

@defopt cursor-in-non-selected-windows
このバッファーローカル変数は、選択されていないウィンドウ内でのカーソルの外見を制御する。これは、フレームパラメーター@code{cursor-type}と同じ値をサポートする。さらに、@code{nil}は選択されていないウィンドウ内にはカーソルを表示せず、@code{t}は通常のカーソルタイプの標準的な変更(塗りつぶされた四角形は中抜きの四角形に、バーはより細いバーにする)の使用を意味する。
@end defopt

@defopt x-stretch-cursor
This variable controls the width of the block cursor displayed on extra-wide
glyphs such as a tab or a stretch of white space.  By default, the block
cursor is only as wide as the font's default character, and will not cover
all of the width of the glyph under it if that glyph is extra-wide.  A
non-@code{nil} value of this variable means draw the block cursor as wide as
the glyph under it.  The default value is @code{nil}.

This variable has no effect on text-mode frames, since the text-mode cursor
is drawn by the terminal out of Emacs's control.
@end defopt

@defopt blink-cursor-alist
This variable specifies how to blink the cursor.  Each element has the form
@code{(@var{on-state} . @var{off-state})}.  Whenever the cursor type equals
@var{on-state} (comparing using @code{equal}), the corresponding
@var{off-state} specifies what the cursor looks like when it blinks off.
Both @var{on-state} and @var{off-state} should be suitable values for the
@code{cursor-type} frame parameter.

それぞれのカーソルタイプのブリンク方法にたいして、そのタイプがここで@var{on-state}として指定されていなければ、さまざまなデフォルトが存在する。フレームパラメーター@code{cursor-type}で指定した際に限り、この変数内での変更は即座に効果を発揮しない。
@end defopt

@node Font and Color Parameters
@subsubsection フォントとカラーのパラメーター
@cindex font and color, frame parameters

  以下のフレームパラメーターは、フォントとカラーの使用を制御します。

@table @code
@vindex font-backend, a frame parameter
@item font-backend
フレーム内でフォントの描画に使用するための@dfn{フォントバックエンド(font
backends)}を指定する、優先順のシンボルのリスト。Xでは現在のところ、@code{x}(X core font
driver)と@code{xft}(Xft font
driver)の2つの利用可能なフォントバックエンドがある。MS-Windowsでは現在のところ、@code{gdi}と@code{uniscribe}の2つの利用可能なフォントバックエンドがある(@ref{Windows
Fonts,,, emacs, The GNU Emacs
Manual}を参照)。その他のシステムでは利用可能なフォントバックエンドは1つだけなので、このフレームパラメーターを変更しても意味がない。

@vindex background-mode, a frame parameter
@item background-mode
このパラメーターは@code{dark}か@code{light}のいずれかで、それぞれバックグラウンドを暗く(dark)するか、明るく(light)するかに対応する。

@vindex tty-color-mode, a frame parameter
@item tty-color-mode
@cindex standard colors for character terminals
このパラメーターは端末上で使用するカラーモードを指定し、、そのシステムの端末機能データベース(terminal capabilities
database、termcap)により与えられた端末のカラーサポートを、その値でオーバーライドする。値にはシンボルか数値を指定できる。数値の場合は、使用するカラー数(および間接的にはそれぞれのカラーを生成するためのコマンド)を指定する。たとえば@code{(tty-color-mode
. 8)}は、標準的なテキストカラーにたいしてANSIエスケープシーケンスの使用を指定する。値-1はカラーサポートをオフに切り替える。

このパラメーターの値がシンボルの場合、それは@code{tty-color-mode-alist}の値を通じた数値を指定するもので、かわりにそのシンボルに割り当てられた数値が使用される。

@vindex screen-gamma, a frame parameter
@item screen-gamma
@cindex gamma correction
If this is a number, Emacs performs gamma correction which adjusts the
brightness of all colors.  The value should be the screen gamma of your
display.

通常のPCモニター／あスクリーンガンマが2.2なので、EmacsおよびXウィンドウのカラー値は一般的にそのガンマ値のモニター上で正しく表示するよう校正されている。@code{screen-gamma}にたいして2.2を指定した場合、それは補正が不必要であることを意味する。その他の値は、通常のモニター上でガンマ値2.2で表示されるであろう、補正されたカラーがスクリーン上に表示されるように意図された補正を要求する。

モニターが表示するカラーが明るすぎる場合は、@code{screen-gamma}に2.2より小さい値を指定するべきである。これは、カラーをより暗くする補正を要求する。スクリーンガンマの値1.5は、LCDカラーディスプレイにたいして、よい結果を与えるだろう。

@vindex alpha, a frame parameter
@item alpha
@cindex opacity, frame
@cindex transparency, frame
@vindex frame-alpha-lower-limit
このパラメーターは、可変透明度(variable opacity)をサポートするグラフィカルディスプレイ上での、そのフレームの透明度を指定する(訳注:
opacityを訳すと逆の不透明度だが、このような場合は一般的に透明度と訳すようなので、それに倣う)。これは0から100の整数であるべきで、0は完全な透明、100hは完全な不透明を意味する。@code{nil}値をもつこともでき、これはEmacsにフレームのopacityをセットしない(ウィンドウマネージャーに委ねる)よう告げる。

フレームが完全に見えなくなるのを防ぐために、変数@code{frame-alpha-lower-limit}は透明度の最低限度を定義する。フレームパラメーターの値がこの変数の値より小さい場合、Emacsは後者を使用する。デフォルトの@code{frame-alpha-lower-limit}は20。

The @code{alpha} frame parameter can also be a cons cell @code{(@var{active}
. @var{inactive})}, where @var{active} is the opacity of the frame when it
is selected, and @var{inactive} is the opacity when it is not selected.
@end table

以下は、特定のフェイスの特定のフェイス属性と自動的に等しくなるので、凖時代遅れとなったフレームパラメーターです(@ref{Standard
Faces,,, emacs, The Emacs Manual}を参照)。

@table @code
@vindex font, a frame parameter
@item font
フレーム内でテキストを表示するためのフォントの名前。これはシステムで有効なフォント名、またはEmacsフォントセット名(@ref{Fontsets}を参照)のいずれかであるような文字列である。これは、@code{default}フェイスの@code{font}属性と等価である。

@vindex foreground-color, a frame parameter
@item foreground-color
文字のイメージに使用するカラー。これは、@code{default}フェイスの@code{:foreground}属性と等価である。

@vindex background-color, a frame parameter
@item background-color
文字のバックグラウンドに使用するカラー。これは、@code{default}フェイスの@code{:background}属性と等価である。

@vindex mouse-color, a frame parameter
@item mouse-color
マウスポインターのカラー。これは@code{mouse}フェイスの@code{:background}属性と等価である。

@vindex cursor-color, a frame parameter
@item cursor-color
ポイントを表示するカーソルのカラー。これは、@code{cursor}フェイスの@code{:background}属性と等価である。

@vindex border-color, a frame parameter
@item border-color
これは、フレームのボーダーのカラーと等価である。これは、@code{border}フェイスの@code{:background}属性と等価である。

@vindex scroll-bar-foreground, a frame parameter
@item scroll-bar-foreground
非@code{nil}の場合は、スクロールバーのフォアグラウンドカラー。これは、@code{scroll-bar}フェイスの@code{:foreground}属性と等価である。

@vindex scroll-bar-background, a frame parameter
@item scroll-bar-background
非@code{nil}の場合は、スクロールバーのバックグラウンドカラー。これは、@code{scroll-bar}フェイスの@code{:background}属性と等価である。
@end table


@node Geometry
@subsection ジオメトリー

  以下は、Xスタイルのウィンドウジオメトリー指定によるアクションのデータを調べる方法です:

@defun x-parse-geometry geom
@cindex geometry specification
関数@code{x-parse-geometry}は、標準的なXウィンドウのジオメトリー文字列を、@code{make-frame}の引数の一部として使用できるalistに変換する。

このalistは@var{geom}内で指定されたパラメーターと、そのパラメーターに指定された値を記述する。各要素は@code{(@var{parameter}
.
@var{value})}のような形式である。可能な@var{parameter}の値は@code{left}、@code{top}、@code{width}、@code{height}である。

サイズのパラメーターの値は整数でなければならない。位置のパラメーター@code{left}および@code{top}の名前に関しては、かわりに右端または下端の位置を示す値もいくつかあるので、完全に正確ではない。位置パラメーターにたいして可能な@var{value}は前述(@ref{Position
Parameters}を参照)したような整数、リスト@code{(+ @var{pos})}、リスト@code{(- @var{pos})}である。

以下は例である:

@example
(x-parse-geometry "35x70+0-0")
     @result{} ((height . 70) (width . 35)
         (top - 0) (left . 0))
@end example
@end defun

@node Terminal Parameters
@section 端末のパラメーター
@cindex terminal parameters

  端末はそれぞれ、関連するパラメーターのリストをもっています。これら@dfn{端末パラメーター(terminal
parameters)}は主に、端末ローカル変数を格納するための便利な手段ですが、いくつかの端末パラメーターは特別な意味をもっています。

  このセクションでは、端末のパラメーター値の読み取りや変更を行う関数を説明します。これらはすべて引数として端末かフレームいずれかを受け入れます。フレームの場合、それはそのフレームの端末の使用を意味します。引数@code{nil}は、選択されたフレームの端末という意味です。

@defun terminal-parameters &optional terminal
この関数は、@var{terminal}nのすべてのパラメーターとその値をリストするalistをリターンする。
@end defun

@defun terminal-parameter terminal parameter
この関数は、@var{terminal}のパラメーター@var{parameter}(シンボル)の値をリターンする。@var{terminal}が@var{parameter}にたいするセッティングをもたない場合、この関数は@code{nil}をリターンする。
@end defun

@defun set-terminal-parameter terminal parameter value
This function sets the parameter @var{parameter} of @var{terminal} to the
specified @var{value}, and returns the previous value of that parameter.
@end defun

以下は、特別な意味をもついくつかの端末パラメーターのリストです:

@table @code
@item background-mode
端末のバックグラウンドカラーの区分で、@code{light}か@code{dark}のいずれか。
@item normal-erase-is-backspace
値は1か0で、これはその端末上で@code{normal-erase-is-backspace-mode}がオンまたはオフのいずれに切り替えられたかに依存する。@ref{DEL
Does Not Delete,,, emacs, The Emacs Manual}を参照のこと。
@item terminal-initted
端末の初期化後に、端末固有の初期化関数にセットされる。
@item tty-mode-set-strings
When present, a list of strings containing escape sequences that Emacs will
output while configuring a tty for rendering.  Emacs emits these strings
only when configuring a terminal: if you want to enable a mode on a terminal
that is already active (for example, while in @code{tty-setup-hook}),
explicitly output the necessary escape sequence using
@code{send-string-to-terminal} in addition to adding the sequence to
@code{tty-mode-set-strings}.
@item tty-mode-reset-strings
When present, a list of strings that undo the effects of the strings in
@code{tty-mode-set-strings}.  Emacs emits these strings when exiting,
deleting a terminal, or suspending itself.
@end table

@node Frame Titles
@section フレームのタイトル
@cindex frame title

  それぞれのフレームには@code{name}というパラメーターがあります。これは、ウィンドウシステムが通常フレーム上端に表示するフレームタイトルにたいする、デフォルトとしての役割をもちます。フレームプロパティ@code{name}をセットすることにより、明示的に名前を指定できます。

  通常は名前を明示的に指定せず、Emacsが変数@code{frame-title-format}に格納されたテンプレートにもとづき、自動的にフレーム名を計算します。Emacsはフレームが再表示されるたびに、毎回名前を再計算します。

@defvar frame-title-format
この変数は、フレーム名が明示的に指定されないときに、フレーム名を計算する方法を指定する。この変数の値は、実際には@code{mode-line-format}のようなモードライン構成(mode
line construct)だが、@samp{%c}および@samp{%l}の構成は無視される。@ref{Mode Line Data}を参照のこと。
@end defvar

@defvar icon-title-format
この変数は、フレームタイトルを明示的に指定しないときの、アイコン化されたフレームの名前の計算方法を指定する。このタイトルはアイコン自体に表示される。
@end defvar

@defvar multiple-frames
この変数はEmacsにより自動的にセットされる。フレームが2つ以上(ミニバッファーのみのフレームと不可視のフレームは勘定に入らない)のとき、値は@code{t}となる。@code{frame-title-format}のデフォルト値は、フレームが複数存在する場合のみ、フレーム名にバッファー名を入れるために、@code{multiple-frames}を使用する。

この変数の値は、@code{frame-title-format}と@code{icon-title-format}の処理中を除き、正確である保証はない。
@end defvar

@node Deleting Frames
@section フレームの削除
@cindex deleting frames

  @dfn{生きたフレーム(live
frame)}とは、削除されていないフレームのことです。フレームが削除される際は、たとえそれへの参照元がなくなるまでLispオブジェクトとして存在し続けるとしても、端末ディスプレイからは削除されます。

@deffn Command delete-frame &optional frame force
@vindex delete-frame-functions
この関数は、フレーム@var{frame}を削除する。@var{frame}がツールチップでなければ、まずフック@code{delete-frame-functions}を実行する(フックの各関数は唯一の引数として@var{frame}を受け取る)。デフォルトでは、@var{frame}は選択されたフレームである。

A frame cannot be deleted as long as its minibuffer serves as surrogate
minibuffer for another frame (@pxref{Minibuffers and Frames}).  Normally,
you cannot delete a frame if all other frames are invisible, but if
@var{force} is non-@code{nil}, then you are allowed to do so.
@end deffn

@defun frame-live-p frame
関数@code{frame-live-p}は、フレーム@var{frame}が削除されていなければ、非@code{nil}をリターンする。リターンされ得る非@code{nil}の値は、@code{framep}と同様である。@ref{Frames}を参照のこと。
@end defun

  いくつかのウィンドウマネージャーは、ウィンドウを削除するコマンドを提供します。これらは、そのウィンドウを操作するプログラムに特別なメッセージを送ることにより機能します。Emacsがそれらメッセージのいずれかを受け取ったときは、@code{delete-frame}イベントを生成します。このイベントの通常の定義は、関数@code{delete-frame}を呼び出すコマンドです。@ref{Misc
Events}を参照してください。

@node Finding All Frames
@section すべてのフレームを探す
@cindex frames, scanning all

@defun frame-list
この関数は、すべての生きたフレーム(削除されていないフレーム)のリストをリターンする。これはバッファーにたいする@code{buffer-list}に類似しており、すべての端末上のフレームが含まれる。リターンされるリストは新たに作成されたものであり、このリストを変更してもEmacs内部への影響はない。
@end defun

@defun visible-frame-list
This function returns a list of just the currently visible frames.
@xref{Visibility of Frames}.  Frames on text terminals always count as
visible, even though only the selected one is actually displayed.
@end defun

@defun next-frame &optional frame minibuf
This function lets you cycle conveniently through all the frames on the
current display from an arbitrary starting point.  It returns the next frame
after @var{frame} in the cycle.  If @var{frame} is omitted or @code{nil}, it
defaults to the selected frame (@pxref{Input Focus}).

2つ目の引数@var{minibuf}は、どのフレームを考慮するかを示す:

@table @asis
@item @code{nil}
ミニバッファーのみのフレームを除外。
@item @code{visible}
すべての可視フレームを考慮する。
@item 0
すべての可視およびアイコン化されたフレームを考慮する。
@item ウィンドウ
特定のウィンドウをミニバッファーとして使用するフレームだけを考慮する。
@item その他
すべてのフレームを考慮する。
@end table
@end defun

@defun previous-frame &optional frame minibuf
@code{next-frame}と同様だが、すべてのフレームを逆方向に巡回する。
@end defun

  @ref{Cyclic Window
Ordering}の@code{next-window}と@code{previous-window}も参照してください。

@node Minibuffers and Frames
@section ミニバッファーとフレーム

Normally, each frame has its own minibuffer window at the bottom, which is
used whenever that frame is selected.  If the frame has a minibuffer, you
can get it with @code{minibuffer-window} (@pxref{Minibuffer Windows}).

@cindex frame without a minibuffer
@cindex surrogate minibuffer frame
However, you can also create a frame without a minibuffer.  Such a frame
must use the minibuffer window of some other frame.  That other frame will
serve as @dfn{surrogate minibuffer frame} for this frame and cannot be
deleted via @code{delete-frame} (@pxref{Deleting Frames}) as long as this
frame is live.

When you create the frame, you can explicitly specify the minibuffer window
to use (in some other frame).  If you don't, then the minibuffer is found in
the frame which is the value of the variable
@code{default-minibuffer-frame}.  Its value should be a frame that does have
a minibuffer.

ミニバッファーのみのフレームを使用する場合は、ミニバッファーにエンター時にそのフレームを前面に移動(raise)したいと思うかもしれません。その場合は、変数@code{minibuffer-auto-raise}に@code{t}をセットします。@ref{Raising
and Lowering}を参照してください。

@defvar default-minibuffer-frame
この変数は、デフォルトでミニバッファーウィンドウとして使用するフレームを指定する。これは、既存のフレームには影響しない。これはカレント端末にたいして常にローカルで、バッファーローカルにはできない。@ref{Multiple
Terminals}を参照のこと。
@end defvar

@node Input Focus
@section 入力のフォーカス
@cindex input focus
@c @cindex selected frame    Duplicates selected-frame, same for selected-window.

どんなときでも、Emacs内のただ1つのフレームが@dfn{選択されたフレーム(selected
frame)}です。選択されたウィンドウは、常に選択されたフレーム上にあります。

When Emacs displays its frames on several terminals (@pxref{Multiple
Terminals}), each terminal has its own selected frame.  But only one of
these is @emph{the} selected frame: it's the frame that belongs to the
terminal from which the most recent input came.  That is, when Emacs runs a
command that came from a certain terminal, the selected frame is the one of
that terminal.  Since Emacs runs only a single command at any given time, it
needs to consider only one selected frame at a time; this frame is what we
call @dfn{the selected frame} in this manual.  The display on which the
selected frame is shown is the @dfn{selected frame's display}.

@defun selected-frame
この関数は選択されたフレームをリターンする。
@end defun

いくつかのウィンドウシステムおよびウィンドウマネージャーは、マウスがあるウィンドウオブジェクトにキーボード入力をダイレクトします。それ以外は、さまざまなウィンドウオブジェクトに@dfn{フォーカスをシフト(shift
the
focus)}するために、明示的なクリックやコマンドを要求します。どちらの方法でも、Emacsはフォーカスをもつフレームを自動的に追跡します。Lisp関数から別フレームに明示的に切り替えるためには、@code{select-frame-set-input-focus}を呼び出します。

Lisp programs can also switch frames temporarily by calling the function
@code{select-frame}.  This does not alter the window system's concept of
focus; rather, it escapes from the window manager's control until that
control is somehow reasserted.

テキスト端末使用時は、その端末上で一度に表示できるフレームは1つだけなので、@code{select-frame}呼び出し後、次回の再表示で新たに選択されたフレームが実際に表示されます。このフレームは、次の@code{select-frame}呼び出しまで、選択されたままです。テキスト端末上の各フレームは、バッファー名の前に表示される番号をもちます(@ref{Mode
Line Variables}を参照)。

@defun select-frame-set-input-focus frame &optional norecord
この関数は、@var{frame}を選択、(他のフレームのせいで不明瞭な場合には)それを前面に移動(raise)して、Xサーバーのフォーカス授与を試みる。テキスト端末上では、次回再表示時に端末スクリーン全体に新たにフレームが表示される。オプション引数@var{norecord}は、@code{select-frame}(下記参照)のときと同じ意味をもつ。この関数のリターン値に意味はない。
@end defun

@deffn Command select-frame frame &optional norecord
この関数は、フレーム@var{frame}を選択し、Xサーバーのフォーカスがあればそれを一時的に無視する。@var{frame}にたいする選択は、次回ユーザーが別フレームに何かを行うか、この関数の次回呼び出しまで継続する(ウィンドウシステムを使用する場合は、以前に選択されていたフレームに依然としてウィンドウシステムの入力フォーカスがあるかもしれないので、コマンドループからリターン後に、そのフレームが選択されたフレームとしてリストアされるかもしれない)。

指定された@var{frame}は選択されたフレームとなり、その端末が選択された端末になる。その後、この関数は@var{frame}内で選択されていたウィンドウを第1引数、@var{norecord}を第2引数でサブルーチンとして@code{select-window}を呼び出す(したがって、@var{norecord}が非@code{nil}なら、もっとも最近に選択されたウィンドウおよびバッファーリストの変更を避ける)。@ref{Selecting
Windows}を参照のこと。

この関数は@var{frame}、または@var{frame}が削除されていれば@code{nil}をリターンする。

一般的には、実行後に端末を戻すよう切り替えることなく、別の端末に切り替えるのが可能な手段として@code{select-frame}を決して使用すべきではない。
@end deffn

Emacsは、サーバーおよびウィンドウマネージャーのリクエストとしてフレーム選択をアレンジすることにより、ウィンドウシステムと協調します。これは、適切なときに@dfn{フォーカス(focus)}と呼ばれる特殊な入力イベントを生成することにより行われます。コマンドループは、@code{handle-switch-frame}を呼び出してフォーカスイベントを処理します。@ref{Focus
Events}を参照してください。

@deffn Command handle-switch-frame frame
この関数は、フレーム@var{frame}選択によりフォーカスイベントを処理する。

フォーカスイベントは通常、このコマンドを呼び出すことにより、その処理を行う。他の理由でこれを呼び出しではならない。
@end deffn

@defun redirect-frame-focus frame &optional focus-frame
この関数は、@var{frame}から@var{focus-frame}にフォーカスをリダイレクトする。これは、@var{frame}にかわって@var{focus-frame}が以降のキーストロークとイベントを受け取るであろうことを意味する。そのようなイベント後は、@code{last-event-frame}の値は@var{focus-frame}になるだろう。また、@var{frame}を指定したswitch-frameイベントも、かわりに
@var{focus-frame}を選択するだろう。

@var{focus-frame}が省略または@code{nil}の場合は、@var{frame}にたいするすべての既存のリダイレクションがキャンセルされ、したがって@var{frame}が自身のイベントを再度受け取ることになる。

フォーカスリダイレクトの用途の1つは、ミニバッファーをもたないフレームにたいしてである。これらのフレームは、別フレーム上のミニバッファーを使用する。別フレーム上のミニバッファーをアクティブにすることは、そのフレームにフォーカスをリダイレクトすることである。これは、たとえマウスがミニバッファーをアクティブにしたフレーム内に留まっていても、ミニバッファーが属すフレームにフォーカスを置く。

フレーム選択は、フォーカスリダイレクションの変更も可能にする。@code{foo}が選択されているときにフレーム@code{bar}を選択することにより、@code{foo}を指すすべてのリダイレクションは、かわりに@code{bar}を指す。これは、ユーザーが@code{select-window}を使用してあるフレームから別のフレームに切り替えた際に、フォーカスのリダイレクトが正しく機能することを可能にする。

これは、フォーカスが自身にリダイレクトされたフレームが、フォーカスがリダイレクトされていないフレームとは異なう扱いを受けることを意味する。前者にたいして@code{select-frame}は影響するが、後者には影響がない。

このリダイレクションは、それを変更するために@code{redirect-frame-focus}が呼び出されるまで継続する。
@end defun

@defvar focus-in-hook
これは、Emacsフレームが入力フォーカスを得た際に実行されるノーマルフックである。
@end defvar

@defvar focus-out-hook
これは、Emacsフレームが入力フォーカスを失った際に実行されるノーマルフックである。
@end defvar

@defopt focus-follows-mouse
これは、ユーザーがマウスを移動した際に、ウィンドウマネージャーがフォーカスを転送するかどうかをEmacsに告げるためのオプションである。非@code{nil}なら、フォーカスは転送される。その場合、コマンド@code{other-frame}は新たに選択されたフレームと一貫性のある位置にマウスを移動する。
@end defopt

@node Visibility of Frames
@section フレームの可視性
@cindex visible frame
@cindex invisible frame
@cindex iconified frame
@cindex minimized frame
@cindex frame visibility

グラフィカルなディスプレイ上のフレームは@dfn{可視(visible)}、@dfn{不可視(invisible)}、または@dfn{アイコン化(iconified)}されているかもしれません。可視なら、そのコンテンツは通常の方法により表示されます。アイコン化されている場合、そのコンテンツは表示されませんが、ビュー内にフレームを戻すための小さいアイコンがどこかにあります(いくつかのウィンドウマネージャーは、この状態を@dfn{アイコン化}ではなく@dfn{最小化}と呼ぶが、Emacsの見地ではこれらは同等である)。フレームが不可視なら、それはまったく表示されません。

  テキスト端末では、いつでも実際に表示されるのはただ1つの選択されたフレームだけなので、可視性に意味はありません。

@defun frame-visible-p frame
この関数は、フレーム@var{frame}の可視性の状態をリターンする。値は、@var{frame}が可視なら@code{t}、不可視なら@code{nil}、アイコン化されている場合は@code{icon}になる。

On a text terminal, all frames are considered visible for the purposes of
this function, even though only one frame is displayed.  @xref{Raising and
Lowering}.
@end defun

@deffn Command iconify-frame &optional frame
この関数は、フレーム@var{frame}をアイコン化する。@var{frame}を省略した場合は、選択されたフレームをアイコン化する。
@end deffn

@deffn Command make-frame-visible &optional frame
この関数は、フレーム@var{frame}を可視にする。@var{frame}を省略した場合は、選択されたフレームを可視にする。これはフレームを前面に移動しないが、望むなら@code{raise-frame}でそれを行うことができる(@ref{Raising
and Lowering}を参照)。
@end deffn

@deffn Command make-frame-invisible &optional frame force
この関数は、フレーム@var{frame}を不可視にする。@var{frame}を省略した場合は、選択されたフレームを不可視にする。

@var{force}が@code{nil}なら、この関数は他のすべてのフレームが不可視の場合は、@var{frame}を不可視にするのを拒絶する。
@end deffn

  フレームの可視性の状態は、フレームパラメーターとしても利用可能である。つまりフレームパラメーターとして読み取りと変更ができる。@ref{Management
Parameters}を参照のこと。ウィンドウマネージャーによりユーザーがフレームのアイコン化や非アイコン化を行うこともできる。これは、Emacsが何らかの制御を及ぼすのが可能なレベルより下のレベルにおいて発生するが、Emacsはそのような変化を追跡するために使用するイベントを提供する。@ref{Misc
Events}を参照のこと。

@node Raising and Lowering
@section フレームを前面や背面に移動する

@cindex raising a frame
@cindex lowering a frame
  ほとんどのウィンドウシステムは、デスクトップというメタファー(metaphor:
比喩的概念)を使用します。このメタファーの一部は、システムレベルのウィンドウ(Emacsではフレーム)が、スクリーン表面に向かって、概念的3次元の垂直方向に積まれていくというアイデアです。2つが重なる箇所では、より高い一方が、より低い一方を覆い隠します。関数@code{raise-frame}および@code{lower-frame}を使用して、フレームを@dfn{前面に移動(raise:
より高い位置へ上げる)}したり@dfn{背面に移動(lower: より低い位置へ移動)}したりすることができます。

@deffn Command raise-frame &optional frame
この関数は、フレーム@var{frame}(デフォルトは選択されたフレーム)を前面に移動する。@var{frame}が不可視もしくはアイコン化されている場合は、それを可視にする。
@end deffn

@deffn Command lower-frame &optional frame
この関数は、フレーム@var{frame}(デフォルトは選択されたフレーム)を背面に移動する。
@end deffn

@defopt minibuffer-auto-raise
これが非@code{nil}なら、ミニバッファーをアクティブにすることにより、ミニバッファーウィンドウのあるフレームが前面に移動される。
@end defopt

  ウィンドウシステム上では、フレームパラメーターを使用して、(フレーム選択時に)auto-raising、(フレーム選択解除時に)auto-loweringを有効にできます。@ref{Management
Parameters}を参照してください。

@cindex top frame
  フレームを前面または背面に移動するという概念は、テキスト端末のフレームにも適用できます。各テキスト端末上で、一度に表示されるのは、常に最前面のフレームだけです。

@defun tty-top-frame &optional terminal
この関数は、@var{terminal}上の最前面のフレームをリターンする。@var{terminal}は端末オブジェクト、フレーム(そのフレームの端末を意味する)、または@code{nil}(選択されたフレームの端末を意味する)であること。これがテキスト端末を参照しなければ、リターン値は@code{nil}となる。
@end defun

@node Frame Configurations
@section フレーム構成
@cindex frame configuration

  @dfn{フレーム構成(frame
configuration)}はフレームのカレント配置、すべてのプロパティ、および各ウィンドウのウィンドウ構成(@ref{Window
Configurations}を参照)を記録します。

@defun current-frame-configuration
この関数は、フレームのカレント配置およびそのコンテンツを記述するフレーム構成のリストをリターンする。
@end defun

@defun set-frame-configuration configuration &optional nodelete
この関数は、フレームの状態を@var{configuration}の記述にリストアする。しかし、この関数は削除されたフレームはリストアしない。

通常、この関数は@var{configuration}内にリストされない既存フレームすべてを削除する。しかし@var{nodelete}が非@code{nil}なら、希望しないそれらフレームはかわりにアイコン化される。
@end defun

@node Mouse Tracking
@section マウスの追跡
@cindex mouse tracking
@c @cindex tracking the mouse   Duplicates track-mouse

  マウスを@dfn{トラック(track:
追跡)}するのが有用なことが時折あります。マウスのトラックとは、マウスの位置を示す何かを表示して、マウス移動とともにそのインジケーターを移動する、という意味です。効果的にマウスをトラックするためには、マウスが実際に移動するまで待機する手段が必要になります。

  マウスをトラックする便利なのは、マウスのモーション(motion:
移動)を表すイベントを問い合わせる方法です。その後は、そのイベントを待機することにより、モーションを待機できます。加えて、発生し得る他の類のイベントも、簡単に処理できます。ボタンのリリースのような何か他のイベントだけを待機してマウスを永久にトラックするは通常は望ましくないので、これは有用です。

@defspec track-mouse body@dots{}
このスペシャルフォームは、マウスモーションイベントの生成を有効にして、@var{body}を実行する。通常、@var{body}はモーションイベントを読み取るために@code{read-event}を使用し、それに対応して表示を変更する。マウスモーションイベントのフォーマットについては、@ref{Motion
Events}を参照のこと。

@code{track-mouse}の値は、@var{body}内の最後のフォームの値である。ボタンのリリースを示すup-event、またはトラックを止めるべきタイミングを意味する類のイベントを確認した際にはリターンするよう、@var{body}をデザインするべきである。

The @code{track-mouse} form causes Emacs to generate mouse motion events by
binding the variable @code{track-mouse} to a non-@code{nil} value.  If that
variable has the special value @code{dragging}, it additionally instructs
the display engine to refrain from changing the shape of the mouse pointer.
This is desirable in Lisp programs that require mouse dragging across large
portions of Emacs display, which might otherwise cause the mouse pointer to
change its shape according to the display portion it hovers on
(@pxref{Pointer Shape}).  Therefore, Lisp programs that need the mouse
pointer to retain its original shape during dragging should bind
@code{track-mouse} to the value @code{dragging} at the beginning of their
@var{body}.
@end defspec

マウスモーションをトラックする通常の目的は、それ以降に発生するボタンのプッシュやリリースをカレント位置に示すことです。

多くの場合は、テキストプロパティ@code{mouse-face}(@ref{Special
Properties}を参照)を使用することにより、マウスをトラックする必要性を回避できます。これは、より低レベルで機能し、かつLispレベルのマウストラッキングよりスムーズに実行されます。

@ignore
@c These are not implemented yet.

These functions change the screen appearance instantaneously.  The
effect is transient, only until the next ordinary Emacs redisplay.  That
is OK for mouse tracking, since it doesn't make sense for mouse tracking
to change the text, and the body of @code{track-mouse} normally reads
the events itself and does not do redisplay.

@defun x-contour-region window beg end
This function draws lines to make a box around the text from @var{beg}
to @var{end}, in window @var{window}.
@end defun

@defun x-uncontour-region window beg end
This function erases the lines that would make a box around the text
from @var{beg} to @var{end}, in window @var{window}.  Use it to remove
a contour that you previously made by calling @code{x-contour-region}.
@end defun

@defun x-draw-rectangle frame left top right bottom
This function draws a hollow rectangle on frame @var{frame} with the
specified edge coordinates, all measured in pixels from the inside top
left corner.  It uses the cursor color, the one used for indicating the
location of point.
@end defun

@defun x-erase-rectangle frame left top right bottom
This function erases a hollow rectangle on frame @var{frame} with the
specified edge coordinates, all measured in pixels from the inside top
left corner.  Erasure means redrawing the text and background that
normally belong in the specified rectangle.
@end defun
@end ignore

@node Mouse Position
@section マウスの位置
@cindex mouse position
@cindex position of mouse

  関数@code{mouse-position}および@code{set-mouse-position}は、マウスのカレント位置にたいするアクセスを提供します。

@defun mouse-position
This function returns a description of the position of the mouse.  The value
looks like @code{(@var{frame} @var{x} . @var{y})}, where @var{x} and @var{y}
are integers giving the (possibly rounded) position in multiples of the
default character size of @var{frame} (@pxref{Frame Font}) relative to the
native position of @var{frame} (@pxref{Frame Geometry}).
@end defun

@defvar mouse-position-function
非@code{nil}なら、この変数の値は@code{mouse-position}にたいして呼び出される関数である。@code{mouse-position}はリターン直前には、自身の通常のリターン値を唯一の引数としてこの関数を呼び出し、それが何であれその関数がリターンしたものをリターンする。

このアブノーマルフックは、@file{xt-mouse.el}のようにLispレベルでマウス処理を行う必要があるパッケージのために存在する。
@end defvar

@defun set-mouse-position frame x y
This function @dfn{warps the mouse} to position @var{x}, @var{y} in frame
@var{frame}.  The arguments @var{x} and @var{y} are integers, giving the
position in multiples of the default character size of @var{frame}
(@pxref{Frame Font}) relative to the native position of @var{frame}
(@pxref{Frame Geometry}).

The resulting mouse position is constrained to the native frame of
@var{frame}.  If @var{frame} is not visible, this function does nothing.
The return value is not significant.
@end defun

@defun mouse-pixel-position
この関数は@code{mouse-position}と似ているが、文字単位ではなくピクセル単位の座標をリターンする。
@end defun

@defun set-mouse-pixel-position frame x y
This function warps the mouse like @code{set-mouse-position} except that
@var{x} and @var{y} are in units of pixels rather than units of characters.

The resulting mouse position is not constrained to the native frame of
@var{frame}.  If @var{frame} is not visible, this function does nothing.
The return value is not significant.
@end defun

On a graphical terminal the following two functions allow the absolute
position of the mouse cursor to be retrieved and set.

@defun mouse-absolute-pixel-position
This function returns a cons cell (@var{x} . @var{y}) of the coordinates of
the mouse cursor position in pixels, relative to a position (0, 0) of the
selected frame's display.
@end defun

@defun set-mouse-absolute-pixel-position x y
This function moves the mouse cursor to the position (@var{x}, @var{y}).
The coordinates @var{x} and @var{y} are interpreted in pixels relative to a
position (0, 0) of the selected frame's display.
@end defun

The following function can tell whether the mouse cursor is currently
visible on a frame:

@defun frame-pointer-visible-p &optional frame
This predicate function returns non-@code{nil} if the mouse pointer
displayed on @var{frame} is visible; otherwise it returns @code{nil}.
@var{frame} omitted or @code{nil} means the selected frame.  This is useful
when @code{make-pointer-invisible} is set to @code{t}: it allows you to know
if the pointer has been hidden.  @xref{Mouse Avoidance,,,emacs, The Emacs
Manual}.
@end defun

@need 3000

@node Pop-Up Menus
@section ポップアップメニュー
@cindex menus, popup

  Lispプログラムはポップアップメニューを表示できるので、ユーザーはマウスで候補を選択できます。テキスト端末上では、マウスが利用不可なら、キーボードのモーションキー@kbd{C-n}、@kbd{C-p}、上矢印キー、下矢印キーで候補を選択できます。

@defun x-popup-menu position menu
この関数は、ポップアップメニューを表示して、ユーザーが何を選択したかの指標をリターンする。

引数@var{position}は、メニュー左上隅をスクリーン上どこに置くか指定する。これはマウスボタンイベント(ユーザーがボタンを操作した位置にメニューを置くよう告げる)、または以下の形式のリストのいずれかである:

@example
((@var{xoffset} @var{yoffset}) @var{window})
@end example

@noindent
ここで、@var{xoffset}と@var{yoffset}は@var{window}左上隅からピクセル単位で測られた座標である。@var{window}はウィンドウ、またはフレームかもしれない。

@var{position}が@code{t}の場合、それはマウスのカレント位置の使用を意味する(テキスト端末上でマウスが利用不可ならフレーム左上隅)。@var{position}が@code{nil}なら、それは実際にメニューをポップアップせずに、@var{menu}内で指定されたキーマップと等価なキーバインディングを事前に計算することを意味する。

引数@var{menu}は、メニュー内で何を表示するかを告げる。これはキーマップまたはキーマップのリストを指定できる(@ref{Menu
Keymaps}を参照)。この場合、リターン値はユーザー選択に対応するイベントのリストである。選択がサブメニュー内で発生した場合、このリストには複数の要素がある(@code{x-popup-menu}はそのイベントシーケンスにバインドされたコマンドを実際には実行しないことに注意)。テキスト端末、およびメニュータイトルをサポートするツールキットでは、@var{menu}がキーマップならタイトルは@var{menu}のプロンプト文字列、@var{menu}がキーマップのリストなら最初のキーマップのプロンプト文字列から取得される(@ref{Defining
Menus}を参照)。

かわりに、@var{menu}は以下の形式をもつこともできる:

@example
(@var{title} @var{pane1} @var{pane2}...)
@end example

@noindent
ここで、それぞれのpaneは以下の形式のリストである

@example
(@var{title} @var{item1} @var{item2}...)
@end example

それぞれ@var{item}は、コンスセル@code{(@var{line}
.
@var{value})}であること。ここで@var{line}は文字列、@var{value}は@var{line}が選択された場合にリターンされる値である。メニューキーマップと異なり、@code{nil}の@var{value}は選択不可のメニューアイテムを作成しない。かわりに、それぞれの@var{item}にコンスセルではなく文字列を指定できる。これは選択不可のメニューアイテムを作成する。

たとえば有効な選択からマウスを外してクリックしたり、@kbd{C-g}をタイプすることにより、有効な選択を行うことなくユーザーがメニューを取り除いた場合は、通常はquitして@code{x-popup-menu}はリターンしない。しかし、@var{position}がマウスボタンイベント(ユーザーがマウスでメニューを呼び出したことを示す)なら、quitは起こらず@code{x-popup-menu}はリターンする。
@end defun

  @strong{使用上の注意:
}メニューキーマップで定義したプレフィクスキー処理を行えるなら、メニューの表示に@code{x-popup-menu}を使用しないでください。メニューの実装にメニューキーマップを使用する場合は、@kbd{C-h
c}および@kbd{C-h
a}でメニュー内の個別アイテムの確認、およびそれらにたいするヘルプを提供できます。かわりに@code{x-popup-menu}を呼び出すコマンドを定義することによりメニューを実装した場合、ヘルプ機能はそのコマンド内部で何が起こっているか知ることができず、そのメニューアイテムのヘルプを何も与えられません。

  マウス移動によりサブメニュー間を切り替えるメニューバーのメカニズムは、それが@code{x-popup-menu}を呼び出すか確認するために、コマンドの定義を見ることができません。したがって、@code{x-popup-menu}を使用してサブメニューの実装を試みた場合、それは統合された方式でメニューバーとともに機能しません。メニューバーのすべてのサブメニューは、親メニューのメニューキーマップにより実装され、決して@code{x-popup-menu}で実装されないのは、これが理由です。@ref{Menu
Bar}を参照してください。

  メニューバーのサブメニューのコンテンツを変化させたい場合にも、その実装には依然としてメニューキーマップを使用するべきです。コンテンツを変化させるためには、必要に応じてメニューキーマップのコンテンツを更新するために、フック関数を@code{menu-bar-update-hook}に追加してください。

@node Dialog Boxes
@section ダイアログボックス
@cindex dialog boxes

  ダイアログボックスとはポップアップメニューの一種です。外見は多少異なり、常にフレーム中央に表示され、階層を1つしかもたず1つ以上のボタンがあります。ユーザーが``yes''、``no''、および別の少数の候補で応答ができる質問を尋ねるのが、ダイアログボックスの主な用途です。単一のボタンでは、ユーザーに重要な情報の確認を強いることもできます。関数@code{y-or-n-p}および@code{yes-or-no-p}は、マウスのクリックにより呼び出されたコマンドから呼び出された際は、キーボードのかわりにダイアログボックスを使用します。

@defun x-popup-dialog position contents &optional header
この関数は、ポップアップダイアログボックスを表示して、ユーザーが何を選択したかの指標をリターンする。引数@var{contents}は、提供するための候補を指定する。これは、以下のフォーマットをもつ:

@example
(@var{title} (@var{string} . @var{value})@dots{})
@end example

@noindent
これは、@code{x-popup-menu}にたいして単一paneを指定するリストのように見える。

リターン値は、選択された候補の@var{value}である。

@code{x-popup-menu}の場合と同様、このリストの要素はコンスセル@code{(@var{string}
. @var{value})}のかわりに、単なる文字列かもしれない。これは、選択不可のボックスを作成する。

このリスト内に@code{nil}がある場合、それは左手側と右手側のアイテムを分ける。つまり、@code{nil}より前のアイテムは左、@code{nil}より後のアイテムは右に表示される。リスト内に@code{nil}を含めない場合は、およそ半数づつが両サイドに表示される。

ダイアログボックスは、常にフレームの中央に表示される。引数@var{position}は、どのフレームかを指定する。可能な値は@code{x-popup-menu}の場合と同様だが、正確な座標や個別のウィンドウは問題ではなく、フレームだけが問題となる。

@var{header}が非@code{nil}ならボックスのフレームタイトルは@samp{Information}、それ以外は@samp{Question}になる。前者は@code{message-box}(@pxref{message-box}を参照)にたいして使用される(テキスト端末上ではボックスタイトルは表示されない)。

いくつかの構成では、Emacsは本当のダイアログボックスを表示できないので、かわりにフレーム中央のポップアップメニュー内に同じアイテムを表示する。

たとえばウィンドウマネージャーを使用して、有効な選択を行うことなくユーザーがダイアログボックスを取り除いた場合は、通常はquitして@code{x-popup-dialog}はリターンしない。
@end defun

@node Pointer Shape
@section ポインターの形状
@cindex pointer shape
@cindex mouse pointer shape

  テキストプロパティ@code{pointer}や、イメージならイメージプロパティ@code{:pointer}および@code{:map}を使用して、特定のテキストやイメージにたいしてマウスポインターのスタイルを指定できます。これらのプロパティに使用できる値は@code{text}(または@code{nil})、@code{arrow}、@code{hand}、@code{vdrag}、@code{hdrag}、@code{modeline}、@code{hourglass}です。@code{text}は、テキスト上で使用される、通常のマウスポインタースタイルを意味します。

  ウィンドウの空部分(void parts:
バッファーコンテンツのどの部分にも対応しない部分)の上では、マウスポインターは通常@code{arrow}スタイルを使用しますが、@code{void-text-area-pointer}をセットすることにより、異なるスタイルを指定できます。

@defopt void-text-area-pointer
この変数は、空テキストエリアにたいするマウスポインタースタイルを指定する。このエリアには、行末の後や、バッファー終端行の下が含まれる。デフォルトでは、@code{arrow}(non-text)ポインタースタイルを使用。
@end defopt

  Xを使用する際は、変数@code{x-pointer-shape}をセットすることにより、@code{text}の本当の外見を指定できます。

@defvar x-pointer-shape
この変数は、Emacsフレーム内で@code{text}ポインタースタイルに通常使用するポインターシェイプを指定する。
@end defvar

@defvar x-sensitive-text-pointer-shape
この変数は、マウスがマウスセンシティブテキスト上にあるときのポインターシェイプを指定する。
@end defvar

  これらの変数は、新たに作成されるフレームに影響します。通常これらは既存のフレームに効果はありませんが、フレームのマウスカラーのインストール時には、これら2つ変数のカレント値もインストールされます。@ref{Font
and Color Parameters}を参照してください。

  これらのポインターシェイプのいずれかを指定するために使用可能な値は、ファイル@file{lisp/term/x-win.el}内で定義されています。それらのリストを確認するには、@kbd{M-x
apropos @key{RET} x-pointer @key{RET}}を使用してください。

@node Window System Selections
@section ウィンドウシステムによる選択
@cindex selection (for window systems)
@cindex clipboard
@cindex primary selection
@cindex secondary selection

  In window systems, such as X, data can be transferred between different
applications by means of @dfn{selections}.  X defines an arbitrary number of
@dfn{selection types}, each of which can store its own data; however, only
three are commonly used: the @dfn{clipboard}, @dfn{primary selection}, and
@dfn{secondary selection}.  Other window systems support only the
clipboard.  @xref{Cut and Paste,, Cut and Paste, emacs, The GNU Emacs
Manual}, for Emacs commands that make use of these selections.  This section
documents the low-level functions for reading and setting window-system
selections.

@deffn Command gui-set-selection type data
This function sets a window-system selection.  It takes two arguments: a
selection type @var{type}, and the value to assign to it, @var{data}.

@var{type}はシンボルであること。通常は@code{PRIMARY}、@code{SECONDARY}、@code{CLIPBOARD}のいずれかである。これらは、Xウィンドウシステムの慣例に対応する大文字のシンボル名である。@var{type}が@code{nil}なら、それは@code{PRIMARY}を意味する。

@var{data}が@code{nil}なら、それはその選択をクリアーすることを意味する。それ以外では、@var{data}は文字列、シンボル、整数(2つの整数からなるコンスかリスト)、オーバーレイ、同じバッファーを指す2つのマーカーのコンスを指定できる。オーバーレイとマーカーのペアは、そのオーバーレイまたはマーカー間のテキストを意味する。引数@var{data}には、非ベクターの選択の値のベクターも指定できる。

この関数は@var{data}をリターンする。
@end deffn

@defun gui-get-selection &optional type data-type
This function accesses selections set up by Emacs or by other programs.  It
takes two optional arguments, @var{type} and @var{data-type}.  The default
for @var{type}, the selection type, is @code{PRIMARY}.

The @var{data-type} argument specifies the form of data conversion to use,
to convert the raw data obtained from another program into Lisp data.
Meaningful values include @code{TEXT}, @code{STRING}, @code{UTF8_STRING},
@code{TARGETS}, @code{LENGTH}, @code{DELETE}, @code{FILE_NAME},
@code{CHARACTER_POSITION}, @code{NAME}, @code{LINE_NUMBER},
@code{COLUMN_NUMBER}, @code{OWNER_OS}, @code{HOST_NAME}, @code{USER},
@code{CLASS}, @code{ATOM}, and @code{INTEGER}.  (These are symbols with
upper-case names in accord with X conventions.)  The default for
@var{data-type} is @code{STRING}.  Window systems other than X usually
support only a small subset of these types, in addition to @code{STRING}.
@end defun

@defopt selection-coding-system
この変数は、選択やクリップボードに読み書きする際のコーディングシステムを指定する。@ref{Coding
Systems}を参照してください。デフォルトは@code{compound-text-with-extensions}で、これはX11が通常使用するテキスト表現に変換する。
@end defopt

@cindex clipboard support (for MS-Windows)
When Emacs runs on MS-Windows, it does not implement X selections in
general, but it does support the clipboard.  @code{gui-get-selection} and
@code{gui-set-selection} on MS-Windows support the text data type only; if
the clipboard holds other types of data, Emacs treats the clipboard as
empty.  The supported data type is @code{STRING}.

For backward compatibility, there are obsolete aliases
@code{x-get-selection} and @code{x-set-selection}, which were the names of
@code{gui-get-selection} and @code{gui-set-selection} before Emacs 25.1.

@node Drag and Drop
@section ドラッグアンドドロップ
@cindex drag and drop

@vindex x-dnd-test-function
@vindex x-dnd-known-types
  ユーザーが別のアプリケーションからEmacsに何かをドラッグをした際、その別アプリケーションはEmacsがドラッグされたデータを処理可能か告げることを期待します。変数@code{x-dnd-test-function}は、何を応答するか決定するために、Emacsにより使用されます。デフォルト値は@code{x-dnd-default-test-function}で、これはドロップされたデータのタイプが@code{x-dnd-known-types}内にあれば、ドロップを受け入れます。何か別の条件にもとづいてEmacsにドロップを許容または拒絶させたい場合は、@code{x-dnd-test-function}および/または@code{x-dnd-known-types}をカスタマイズできます。

@vindex x-dnd-types-alist
  Emacsが異なるタイプのドロップを処理する方法を変更したり、新たなタイプを追加したい場合は、@code{x-dnd-types-alist}をカスタマイズします。これには、他のアプリケーションがドラッグアンドドロップに使用するのが何のタイプなのか、詳細な知識が要求されます。

@vindex dnd-protocol-alist
  EmacsにURLがドロップされたとき、それはファイルかもしれませんが、他のURLタイプ(ftp、http、...)であるかもしれません。Emacsはまず、そのURLに何を行うべきか判断するために、@code{dnd-protocol-alist}をチェックします。それにマッチがなく、かつ@code{browse-url-browser-function}がalistなら、Emacsはそこでマッチを探します。それでもマッチが見つからなければ、そのURLにたいするテキストを挿入します。これらの変数をカスタマイズすれば、Emacsの挙動を変更できます。

@node Color Names
@section カラー名

@cindex color names
@cindex specify color
@cindex numerical RGB color specification
  カラー名(color
name)とは、カラーを指定するテキスト(通常は文字列)です。@samp{black}、@samp{white}、@samp{red}等が指定できます。定義された名前のリストは、@kbd{M-x
list-colors-display}を使用して確認できます。@samp{#@var{rgb}}や@samp{RGB:@var{r}/@var{g}/@var{b}}のような、数値的な形式でカラーを指定することもできます。ここで、@var{r}は赤(red)、@var{g}は緑(green)、@var{b}は青(blue)のレベルを指定します。1桁、2桁、3桁、または4桁の16進数を@var{r}に使用できます。その後、@var{g}と@var{b}には同じ桁数の16進数を同様に使用しなければなりません。これにより、総桁数が3､6､9､または12桁の16進数となります(カラーの数値的なRGB指定についての詳細は、Xウィンドウシステムのドキュメントを参照されたい)。

  以下の関数は、有効なカラー名と、それらの外見を判断する手段を提供します。以下で説明するように、その値は@dfn{選択されたフレーム(selected
frame)}に依存する場合があります。``選択されたフレーム''という用語の意味については、@ref{Input Focus}を参照してください。

  補完付きでカラー名のユーザー入力を読み取るには、@code{read-color}を使用します(@ref{High-Level Completion,
read-color}を参照)。

@defun color-defined-p color &optional frame
この関数は、カラー名が有意かどうかを報告する。もし有意なら@code{t}、それ以外は@code{nil}をリターンする。引数@var{frame}は、どのフレームのディスプレイにたいして問い合わせるかを指定する。@var{frame}が省略または@code{nil}の場合は、選択されたフレームが使用される。

これは、使用しているディスプレイがそのカラーをサポートするかどうかは告げないことに注意。X使用時には、すべての種類のディスプレイ上のすべての定義されたカラーを問い合わせることができ、何らかの結果(通常は可能な限り近いカラー)を得ることができるでしょう。あるフレームが特定のカラーを実際に表示できるかどうか判断するためには、@code{color-supported-p}(以下参照)を使用してください。

@findex x-color-defined-p
この関数は、以前は@code{x-color-defined-p}と呼ばれており、その名前は今でもエイリアスとしてサポートされている。
@end defun

@defun defined-colors &optional frame
この関数は、@var{frame}(デフォルトは選択されたフレーム)上で定義かつサポートされるカラー名のリストをリターンする。@var{frame}がカラーをサポートしなければ、値は@code{nil}となる。

@findex x-defined-colors
この関数は、以前は@code{x-defined-colors}と呼ばれており、その名前は今でもエイリアスとしてサポートされている。
@end defun

@defun color-supported-p color &optional frame background-p
これは、@var{frame}が実際にカラー@var{color}(または最低でもそれに近いカラー)を表示可能なら@code{t}をリターンする。@var{frame}が省略または@code{nil}なら、この問いは選択されたフレームに適用される。

フォアグラウンドおよびバックグラウンドにたいして異なるカラーセットをサポートする端末がいくつかある。@var{background-p}が非@code{nil}の場合、それは@var{color}がバックグラウンドとして、それ以外はフォアグラウンドとして使用可能かどうかを問うことを意味する。

引数@var{color}は、有効なカラー名でなければならない。
@end defun

@defun color-gray-p color &optional frame
これは、@var{color}が@var{frame}のディスプレイ上の定義として、グレイスケールなら@code{t}をリターンする。@var{frame}が省略または@code{nil}なら、この問いは選択されたフレームに適用される。@var{color}が有効なカラー名でなければ、この関数は@code{nil}をリターンする。
@end defun

@defun color-values color &optional frame
@cindex rgb value
この関数は、@var{frame}上で理想的には@var{color}がどのように見えるべきかを記述する値をリターンする。@var{color}が定義済みの場合、値は赤、緑、青の割合を与える3つの整数からなるリストである。それぞれの整数の範囲は原則として0から65535だが、この範囲全体を使用しないディスプレイもいくつか存在するだろう。この3要素のリストは、カラーの@dfn{RGB値(rgb
values)}と呼ばれる。

@var{color}が未定義なら、値は@code{nil}である。

@example
(color-values "black")
     @result{} (0 0 0)
(color-values "white")
     @result{} (65280 65280 65280)
(color-values "red")
     @result{} (65280 0 0)
(color-values "pink")
     @result{} (65280 49152 51968)
(color-values "hungry")
     @result{} nil
@end example

カラーの値は、@var{frame}のディスプレイにたいしてリターンされる。@var{frame}が省略または@code{nil}の場合、この情報は選択されたフレームのディスプレイにたいしてリターンされる。このフレームがカラーを表示できない場合、値は@code{nil}となる。

@findex x-color-values
この関数は、以前は@code{x-color-values}と呼ばれており、その名前は今でもエイリアスとしてサポートされている。
@end defun

@node Text Terminal Colors
@section テキスト端末のカラー
@cindex colors on text terminals

  通常、テキスト端末は少しのカラーしかサポートせず、コンピューターはカラー選択に小さい整数を使用します。これは、選択したカラーがどのように見えるかコンピューターが信頼性をもって告げることができず、どのカラーがどのような小さい整数に対応するかという情報を、をアプリケーションに伝える必要があることを意味します。しかし、Emacsは標準的なカラーセットを知っており、それらの自動的な使用を試みるでしょう。

  このセクションで説明する関数は、Emacsが端末カラーを使用する方法を制御します。

  これらの関数のうちのいくつかは、@ref{Color Names}で説明した@dfn{RGB値(rgb values)}を使用またはリターンします。

  これらの関数は、オプション引数としてディスプレイ(フレームまたは端末名のいずれか)を受け取ります。わたしたちは将来、異なる端末上で異なるカラーをEmacsにサポートさせたいと望んでいます。そうすれば、この引数はどの端末を処理するか(デフォルトは選択されたフレームの端末。@ref{Input
Focus}を参照のこと)を指定するようになるでしょう。しかし現在のところ、@var{frame}引数に効果はありません。

@defun tty-color-define name number &optional rgb frame
この関数は、カラー名@var{name}を、その端末上のカラー値@var{number}に関連付ける。

オプション引数@var{rgb}が指定された場合、それはそのカラーが実際にどのように見えるかを指定する、3つの数値のリストからなるRGB値である。@var{rgb}を指定しない場合、Emacsはそれがどのように見えるか知らないので、そのカラーを他のカラーに近似するために@code{tty-color-approximate}で使用することができない。
@end defun

@defun tty-color-clear &optional frame
この関数は、テキスト端末の定義済みカラーのテーブルをクリアーする。
@end defun

@defun tty-color-alist &optional frame
この関数は、テキスト端末がサポートする既知のカラーを記録したalistをリターンする。

それぞれの要素は、@code{(@var{name} @var{number} . @var{rgb})}または@code{(@var{name}
@var{number})}という形式をもつ。ここで、@var{name}はカラー名、@var{number}はその端末でカラー指定に使用される数値である。@var{rgb}が与えられた場合、それはそのカラーが実際にどのように見えるかを告げる3つのカラー値(赤、緑、青)のリストである。
@end defun

@defun tty-color-approximate rgb &optional frame
この関数は、@var{display}にたいしてサポートされた既知のカラーの中から、RGB値@var{rgb}(カラー値のリスト)で記述されたもっとも近いカラーを探す。リターン値は、@code{tty-color-alist}の要素である。
@end defun

@defun tty-color-translate color &optional frame
この関数は、@var{display}にたいしてサポートされた既知のカラーの中から、もっとも近いカラーのインデックス(整数)をリターンする。名前@var{color}が未定義なら、値は@code{nil}となる。
@end defun

@node Resources
@section Xリソース

このセクションでは、Xリソース、または他のオペレーティングシステム上での等価物を問い合わせたり使用する関数および変数をいくつか説明します。Xリソースにたいする詳細な情報は、@ref{X
Resources,, X Resources, emacs, The GNU Emacs Manual}を参照してください。

@defun x-get-resource attribute class &optional component subclass
関数@code{x-get-resource}は、Xウィンドウのデフォルトデータベースからリソース値を取得する。

リソースは、@dfn{キー(key)}と@dfn{クラス(class)}の組み合わせによりインデックス付けされている。この関数は、@samp{@var{instance}.@var{attribute}}という形式をキー(@var{instance}はEmacsが呼び出されたときの名前)、クラスとして@samp{Emacs.@var{class}}として使用することにより検索を行う。

オプション引数@var{component}および@var{subclass}は、それぞれキーおよびクラスを追加する。指定する場合は両方を指定するか、さもなくばどちらも指定してはならない。これらを指定した場合、キーは@samp{@var{instance}.@var{component}.@var{attribute}}、クラスは@samp{Emacs.@var{class}.@var{subclass}}となる。
@end defun

@defvar x-resource-class
This variable specifies the application name that @code{x-get-resource}
should look up.  The default value is @code{"Emacs"}.  You can examine X
resources for other application names by binding this variable to some other
string, around a call to @code{x-get-resource}.
@end defvar

@defvar x-resource-name
この変数は、@code{x-get-resource}が照会すべきインスタンス名を指定する。デフォルト値はEmacs呼び出し時の名前、またはスイッチ@samp{-name}または@samp{-rn}で指定された値である。
@end defvar

上述のいくつかを説明するために、Xリソースファイル(通常は@file{~/.Xdefaults}や@file{~/.Xresources})内に以下のような行があるとしましょう:

@example
xterm.vt100.background: yellow
@end example

@noindent
その場合は:

@example
@group
(let ((x-resource-class "XTerm") (x-resource-name "xterm"))
  (x-get-resource "vt100.background" "VT100.Background"))
     @result{} "yellow"
@end group
@group
(let ((x-resource-class "XTerm") (x-resource-name "xterm"))
  (x-get-resource "background" "VT100" "vt100" "Background"))
     @result{} "yellow"
@end group
@end example

@defvar inhibit-x-resources
この変数が非@code{nil}なら、EmacsはXリソースを照会せず、新たなフレーム作成時にXリソースは何も効果をもたない。
@end defvar

@node Display Feature Testing
@section ディスプレー機能のテスト
@cindex display feature testing

  このセクションの関数は、特定のディスプレイの基本的な能力を説明します。Lispプログラムは、そのディスプレイが行えることに挙動を合わせるために、それらを使用できます。たとえば、ポップアップメニューがサポートされなければ、通常はポップアップメニューを使用するプログラムは、ミニバッファーを使用できます。

  これらの関数のオプション引数@var{display}は、問い合わせるディスプレイを指定します。これにはディスプレイ名、フレーム(フレームがあるディスプレイを指定)、または@code{nil}(選択されたフレームのディスプレイを参照する。@ref{Input
Focus}を参照されたい)を指定できます。

  ディスプレイに関する情報を取得するその他の関数については、@ref{Color Names}を参照してください。

@defun display-popup-menus-p &optional display
この関数は、@var{display}上でポップアップメニューがサポートされていれば@code{t}、それ以外は@code{nil}をリターンする。Emacsディスプレイのある部分をマウスでクリックすることによりメニューがポップアップするので、ポップアップメニューのサポートにはマウスが利用可能であることが要求される。
@end defun

@defun display-graphic-p &optional display
この関数は、@var{display}が一度に複フレームおよび複数の異なるフォントを表示する能力を有すグラフィックディスプレイなら@code{t}をリターンする。これは、Xのようなウィンドウシステムのディスプレイにたいしては真、テキスト端末にたいしては偽となる。
@end defun

@defun display-mouse-p &optional display
@cindex mouse, availability
この関数は、@var{display}でマウスが利用可能なら@code{t}、それ以外は@code{nil}をリターンする。
@end defun

@defun display-color-p &optional display
@findex x-display-color-p
この関数は、そのスクリーンがカラースクリーンなら@code{t}をリターンする。これは以前は@code{x-display-color-p}と呼ばれており、その名前はエイリアスとして今でもサポートされる。
@end defun

@defun display-grayscale-p &optional display
この関数は、スクリーンがグレースケールを表示可能なら@code{t}をリターンする(カラーディスプレイはすべてこれを行うことができる)。
@end defun

@defun display-supports-face-attributes-p attributes &optional display
@anchor{Display Face Attribute Testing}
この関数は、@var{attributes}内のすべてのフェイス属性がサポートされていれば非@code{nil}をリターンする(@ref{Face
Attributes}を参照)。

The definition of ``supported'' is somewhat heuristic, but basically means
that a face containing all the attributes in @var{attributes}, when merged
with the default face for display, can be represented in a way that's

@enumerate
@item
デフォルトフェイスとは異なる外見で表示でき、かつ

@item
close in spirit to what the attributes specify, if not exact.
@end enumerate

Point (2) implies that a @code{:weight black} attribute will be satisfied by
any display that can display bold, as will @code{:foreground "yellow"} as
long as some yellowish color can be displayed, but @code{:slant italic} will
@emph{not} be satisfied by the tty display code's automatic substitution of
a dim face for italic.
@end defun

@defun display-selections-p &optional display
この関数は、@var{display}が選択(selections)をサポートすれば@code{t}をリターンする。ウィンドウ化されたディスプレイでは、通常は選択がサポートされるが、他の場合にもサポートされ得る。
@end defun

@defun display-images-p &optional display
この関数は、@var{display}がイメージを表示可能なら@code{t}をリターンする。ウィンドウ化されたディスプレイは原則イメージを処理するが、イメージにたいするサポートを欠くシステムもいくつかある。イメージをサポートしないディスプレイ上では、Emacsはツールバーを表示できない。
@end defun

@defun display-screens &optional display
この関数は、そのディスプレイに割り当てられたスクリーンの数をリターンする。
@end defun

@defun display-pixel-height &optional display
この関数は、スクリーンの高さをピクセルでリターンする。文字端末では、文字数で高さを与える。

For graphical terminals, note that on multi-monitor setups this refers to
the pixel height for all physical monitors associated with @var{display}.
@xref{Multiple Terminals}.
@end defun

@defun display-pixel-width &optional display
この関数は、スクリーンの幅をピクセルでリターンする。文字端末では、文字数で幅を与える。

For graphical terminals, note that on multi-monitor setups this refers to
the pixel width for all physical monitors associated with @var{display}.
@xref{Multiple Terminals}.
@end defun

@defun display-mm-height &optional display
この関数は、スクリーンの高さをミリメートルでリターンする。@code{nil}なら、Emacsがその情報を取得できなかったことを意味する。

For graphical terminals, note that on multi-monitor setups this refers to
the height for all physical monitors associated with @var{display}.
@xref{Multiple Terminals}.
@end defun

@defun display-mm-width &optional display
この関数は、スクリーンの幅をミリメートルでリターンする。@code{nil}なら、Emacsがその情報を取得できなかったことを意味する。

For graphical terminals, note that on multi-monitor setups this refers to
the width for all physical monitors associated with @var{display}.
@xref{Multiple Terminals}.
@end defun

@defopt display-mm-dimensions-alist
この変数は、システムの提供する値が不正な場合に@code{display-mm-height}および@code{display-mm-width}がリターンするグラフィカルなディスプレイのサイズを、ユーザーが指定できるようにする。
@end defopt

@cindex backing store
@defun display-backing-store &optional display
この関数は、そのディスプレイのバッキングストアー(backing
store)の能力をリターンする。バッキングストアーとは、非露出ウィンドウ(およびウィンドウの一部)のピクセルを記録しておいて、露出時に素早く表示できるようにすることを意味する。

値にはシンボル@code{always}、@code{when-mapped}、@code{not-useful}である。特定の種類のディスプレイにたいしてこの問いが適用外の際、この関数は@code{nil}をリターンすることもある。
@end defun

@cindex SaveUnder feature
@defun display-save-under &optional display
この関数は、そのディスプレイがSaveUnder機能をサポートすれば非@code{nil}をリターンする。この機能は、ポップアップウィンドウに隠されるピクセルを保存して、素早くポップダウンができるようにするために使用される。
@end defun

@defun display-planes &optional display
この関数は、そのディスプレイがサポートする平面数(number of planes)をリターンする。これは通常、ピクセルごとのビット(bits per
pixel: 色深度[bpp])数である。ttyディスプレイでは、サポートされるカラー数の2進対数(log to base two)である。
@end defun

@defun display-visual-class &optional display
この関数は、そのスクリーンのビジュアルクラスをリターンする。値はシンボル@code{static-gray}(カラー数変更不可の限定されたグレイ)、@code{gray-scale}(フルレンジのグレイ)、@code{static-color}(カラー数変更不可の限定されたカラー)、@code{pseudo-color}(限定されたカラー数のカラー)、@code{true-color}(フルレンジのカラー)、および@code{direct-color}(フルレンジのカラー)のいずれかである。
@end defun

@defun display-color-cells &optional display
この関数は、そのスクリーンがサポートするカラーのセル数をリターンする。
@end defun

  以下の関数は、Emacsが指定された@var{display}を表示する場所に使用されるウィンドウシステムの追加情報を取得します(関数名先頭の@code{x-}は歴史的理由による)。

@defun x-server-version &optional display
この関数は、GNUおよびUnixシステム上のXサーバーのような、@var{display}上で実行されているGUIウィンドウシステムのバージョン番号のリストをリターンする。値は3つの整数からなるリストで、1つ目と2つ目の整数はそのプロトコルのメジャーバージョン番号とマイナーバージョン番号、3つ目の整数はウィンドウシステムソフトウェア自体のディストリビューター固有のリリース番号である。GNUおよびUnixシステムでは、通常これらはXプロトコルのバージョン番号と、Xサーバーソフトウェアのディストリビューター固有のリリース番号である。MS-Windowsでは、WidowsのOSバージョン番号である。
@end defun

@defun x-server-vendor &optional display
This function returns the vendor that provided the window system software
(as a string).  On GNU and Unix systems this really means whoever
distributes the X server.  On MS-Windows this is the vendor ID string of the
Windows OS (Microsoft).

X開発者がソフトウェア配布者を``vendors''とラベル付けしたことは、いかなるシステムも非商業的に開発および配布できないと彼らが誤って仮定したことを示している。
@end defun

@ignore
@defvar x-no-window-manager
この変数の値は、Xウィンドウマネージャーが何も使用されていなければ@code{t}となる。
@end defvar
@end ignore

@ignore
@item
The functions @code{x-pixel-width} and @code{x-pixel-height} return the
width and height of an X Window frame, measured in pixels.
@end ignore
